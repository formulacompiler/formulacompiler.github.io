<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>Ranges Overlapping Section Bounds - Abacus Formula Compiler for Java</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="../../style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="../../style_print.css" rel="stylesheet" type="text/css" media="print" />
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="download_band">
				<a href="../../download/index.htm">
					<img src="../../site_img/download_button.gif" />
				</a>
			</div>
			<div id="area_band">
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../../index.htm">Home</a> | 
						
					<a href="../../quick.htm">Quick Start</a> | <a href="../../doc/index.htm">Documentation</a> | <a href="../../download/index.htm">Download</a> | <a href="../../support.htm">Support</a> | <span class="selected"><a href="../../contribute/index.htm">Contribute</a></span>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../../index.htm">Home</a> &gt; <a href="../index.htm">Contribute</a> &gt; <a href="index.htm">Journal</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>Ranges Overlapping Section Bounds</h1>

	<p>I have started to implement support for <code>DFOLD()</code> over dynamic sections in the data. For this to work reasonably, I have to first support range references that overlap section bounds. This is because <code>DSUM()</code> et al. only take a single range reference in their arguments.</p>



	<h2><a name="pagetoc__1">Why Support Overlaps?</a></h2>

	<p>The referenced data table, in which I want to support sections, consists of the top row with the labels and the subsequent data rows. Because you can only specify a single range reference, you cannot simply union the label range and the data range separately. So <span class="caps">SEJ</span> must detect the overlap by itself.</p>


	<h5>Shapeless Ranges</h5>

	<p><span class="caps">SEJ</span> could, in fact, properly take apart a range reference that spans multiple, possibly nested, dynamic sections. Currently, it not even issues a proper error message, but fails later on with rather cryptic errors because it thinks there are plain cell outer refs to inner cells. I am going to address that with new tests.</p>


	<p>Such generality is only reasonable for shapeless ranges, however. A <em>shapeless range</em> is one whose matrix layout is irrelevant. Only the cell set it spans is used. This is the case with arguments to to <code>SUM()</code> et al. but not, for example, to <code>INDEX()</code>).</p>


	<h5>Shaped Ranges</h5>

	<p>For shaped ranges, the discussion is most pertinent to vertically repeating sections (such as in tables accessed by <code>DSUM()</code>). However, for functions like <code>INDEX()</code> the principles laid out apply to horizontally repeating sections in an analogous way.</p>


	<p>For shaped ranges, the only thing <span class="caps">SEJ</span> should reasonably support is (assuming vertical repetition):</p>

<ul>
	<li>A mix of static rows and vertical sections which fully cover the width of the range.</li>
	<li>Nested vertical subsections. They do not have to cover the range width fully. This means <span class="caps">SEJ</span> will support <span class="caps">SQL</span>-like repetition of the 1: side in a 1:n join. In the example sheet below, <code>Section</code> and <code>Subsection</code> form such a constellation.</li>
</ul>

	<p>By requiring the top-level sections encountered in a shaped range to cover the range width fully, I avoid the problem of what to do with outer cells to the left or right of the sections. Should the value at the height of the first row of the section be repeated for the whole height of the section? What about the other values specified beside the sample data of the section? They would be dropped silently. Since constant values in the first row of a section are repeated anyway, this is not restrictive.</p>


	<h5>Shaped vs. Shapeless</h5>

	<p>In the example below, what is <code>SUM(C3:C6)</code>? Is it</p>

	<pre><code>r = 0
for (e : section())
    r += e.value();</code></pre>


	<p>or is it</p>

	<pre><code>r = 0
for (e : section()) 
    for (se : e.subsection())
        r += e.value();</code></pre>


	<p>In other words, does <code>SUM()</code> respect the 1:n repetition of the 1: side? I am tempted to say its the first option, as <span class="caps">SUM</span>&#8217;s argument is shapeless. This would make it possible to work with hierarchical data in a natural, <span class="caps">XML</span>-like fashion.</p>


	<p>But then, the result of <code>SUM()</code> will differ from the result of <code>DSUM()</code>, which takes a shaped argument!</p>


	<p>One solution might be to let the user indicate the desired behaviour using the values of the repeated cells of the 1: side in the sample data:</p>

<ul>
	<li>Repeating the values of the first row/column indicate 1:n join behaviour (shaped).</li>
	<li>Blank values indicate hierarchical, <span class="caps">XML</span>-like behaviour (shapeless).</li>
</ul>

	<p><span class="caps">SEJ</span> should then check that shaped references always repeat the first row values in the sample data as they cannot be treated in a shapeless fashion.</p>


	<p>To achieve this, <span class="caps">SEJ</span> could, during construction of the computation model, replace such a repeating 1: cell by a reference of the form:</p>

	<pre><code>subelement.parent().value()</code></pre>


	<p>and include it within the subrange. A peephole optimization could later optimize this again to <code>element.value()</code> in the generated code. It is probably reasonable to require that a section with a nested subsection be either fully repeating (shaped), or not at all (shapeless). If not that, then at least all the repeating cells should be adjacent to the subsection so the latter can be extended to encompass the repeating cells.</p>


	<h2><a name="pagetoc__2">Test Setup</a></h2>

	<p>Here is the setup for some fairly complex test cases:</p>

	<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b>Vertically repeating section:</b></td>
			<td><b>Name</b></td>
			<td><b>Value</b></td>
			<td><b>RepValue</b></td>
			<td><b>SubName</b></td>
			<td><b>SubValue</b></td>
			<td><b>SubRef</b></td>
			<td><b>InnerRef</b></td>
			<td><b>InnerSum</b></td>
			<td><b>SelfSum</b></td>
			<td><b>OuterSum</b></td>
			<td><b>Value2</b></td>
			<td><b>Outer cells</b></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td><b>Outer cells:</b></td>
			<td><b></b></td>
			<td class="xl-num">-1</td>
			<td class="xl-num">-1</td>
			<td><b></b></td>
			<td class="xl-num">-10</td>
			<td></td>
			<td></td>
			<td><b></b></td>
			<td><b></b></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-r1">One</td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-r4">One.A</td>
			<td class="xl-num xl-r4">10</td>
			<td class="xl-num xl-r4">11<br/><span class="xl-exp">=F3+C3</span></td>
			<td class="xl-num xl-r1">2<br/><span class="xl-exp">=C3+1.0</span></td>
			<td class="xl-num xl-r1">62<br/><span class="xl-exp">=SUM(F3:G4)</span></td>
			<td class="xl-num xl-r1">7<br/><span class="xl-exp">=SUM(C3:C6)+C3</span></td>
			<td class="xl-num xl-r1">241<br/><span class="xl-exp">=SUM(F2:F11)+C3</span></td>
			<td class="xl-num xl-r1">3</td>
			<td class="xl-num">4711</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-r4">One.B</td>
			<td class="xl-num xl-r4">20</td>
			<td class="xl-num xl-r4">21<br/><span class="xl-exp">=F4+C3</span></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-num">4712</td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td class="xl-r1">Two</td>
			<td class="xl-num xl-r1">2</td>
			<td class="xl-num xl-r1">2</td>
			<td class="xl-r1">Two.A</td>
			<td class="xl-num xl-r1">30</td>
			<td class="xl-num xl-r1">32<br/><span class="xl-exp">=F5+C5</span></td>
			<td class="xl-num xl-r1">3<br/><span class="xl-exp">=C5+1.0</span></td>
			<td class="xl-num xl-r1">62<br/><span class="xl-exp">=SUM(F5:G5)</span></td>
			<td class="xl-num xl-r1">8<br/><span class="xl-exp">=SUM(C3:C6)+C5</span></td>
			<td class="xl-num xl-r1">242<br/><span class="xl-exp">=SUM(F2:F11)+C5</span></td>
			<td class="xl-num xl-r1">2</td>
			<td class="xl-num">4713</td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td class="xl-r1">Three</td>
			<td class="xl-num xl-r1">3</td>
			<td class="xl-num xl-r1">3</td>
			<td class="xl-r1">Three.A</td>
			<td class="xl-num xl-r1">40</td>
			<td class="xl-num xl-r1">43<br/><span class="xl-exp">=F6+C6</span></td>
			<td class="xl-num xl-r1">4<br/><span class="xl-exp">=C6+1.0</span></td>
			<td class="xl-num xl-r1">83<br/><span class="xl-exp">=SUM(F6:G6)</span></td>
			<td class="xl-num xl-r1">9<br/><span class="xl-exp">=SUM(C3:C6)+C6</span></td>
			<td class="xl-num xl-r1">243<br/><span class="xl-exp">=SUM(F2:F11)+C6</span></td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-num">4714</td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td><b>Outer cells:</b></td>
			<td></td>
			<td class="xl-num">4</td>
			<td class="xl-num">4</td>
			<td></td>
			<td class="xl-num">50</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td><b>Another vertical section:</b></td>
			<td class="xl-r2">Eins</td>
			<td class="xl-num xl-r2">1</td>
			<td class="xl-num xl-r2">1</td>
			<td class="xl-r2"></td>
			<td class="xl-num xl-r2">10</td>
			<td class="xl-num xl-r3">1</td>
			<td class="xl-num xl-r3">2</td>
			<td class="xl-num xl-r3">3</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b>with horizontal section to the right:</b></td>
			<td class="xl-r2">Zwei</td>
			<td class="xl-num xl-r2">2</td>
			<td class="xl-num xl-r2">2</td>
			<td class="xl-r2"></td>
			<td class="xl-num xl-r2">20</td>
			<td class="xl-num xl-r3">0.1</td>
			<td class="xl-num xl-r3">0.2</td>
			<td class="xl-num xl-r3">0.3</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td><b></b></td>
			<td class="xl-r2">Drei</td>
			<td class="xl-num xl-r2">3</td>
			<td class="xl-num xl-r2">3</td>
			<td class="xl-r2"></td>
			<td class="xl-num xl-r2">30</td>
			<td class="xl-num xl-r3">0.01</td>
			<td class="xl-num xl-r3">0.02</td>
			<td class="xl-num xl-r3">0.03</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td><b>Outer cells:</b></td>
			<td></td>
			<td class="xl-num">5</td>
			<td class="xl-num">5</td>
			<td></td>
			<td class="xl-num">40</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B3:L6</span> <span class="xl-name">(Section)</span><br/><span class="xl-r2">B8:F10</span> <span class="xl-name">(Section2)</span><br/><span class="xl-r3">G8:I10</span> <span class="xl-name">(Section3)</span><br/><span class="xl-r4">E3:G4</span> <span class="xl-name">(Subsection)</span>


	<h2><a name="pagetoc__3">Test Cases</a></h2>

	<p>And here are the tests:</p>

	<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">14</td>
			<td><b>This works:</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">15</td>
			<td>Nested sum</td>
			<td class="xl-num">100<br/><span class="xl-exp">=SUM(F3:F6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">16</td>
			<td>Sum spanning multiple sections</td>
			<td class="xl-num">20<br/><span class="xl-exp">=SUM(C2:C11)</span></td>
		</tr>
		<tr>
			<td class="xl-row">17</td>
			<td>Sum spanning multiple sections (shaped)</td>
			<td class="xl-num">41<br/><span class="xl-exp">=SUM(C2:D11)</span></td>
		</tr>
		<tr>
			<td class="xl-row">18</td>
			<td>Sum spanning multiple and nested sections</td>
			<td class="xl-num">240<br/><span class="xl-exp">=SUM(F2:F11)</span></td>
		</tr>
		<tr>
			<td class="xl-row">19</td>
			<td>Sum over inner refs</td>
			<td class="xl-num">9<br/><span class="xl-exp">=SUM(H3:H6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">20</td>
			<td>Sum over inner sums</td>
			<td class="xl-num">207<br/><span class="xl-exp">=SUM(I3:I6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">21</td>
			<td>Sum over inner self sums</td>
			<td class="xl-num">24<br/><span class="xl-exp">=SUM(J3:J6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">22</td>
			<td>Sum over inner outer nested sums</td>
			<td class="xl-num">726<br/><span class="xl-exp">=SUM(K3:K6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">23</td>
			<td>Sum over nested and inner section in parallel</td>
			<td class="xl-num">116<br/><span class="xl-exp">=SUM(G3:H6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">24</td>
			<td>Sum over section and cells in parallel</td>
			<td class="xl-num">18856<br/><span class="xl-exp">=SUM(L3:M6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">25</td>
			<td>Sum over mixed section extents</td>
			<td class="xl-num">66.66<br/><span class="xl-exp">=SUM(F8:I10)</span></td>
		</tr>
		<tr>
			<td class="xl-row">26</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">27</td>
			<td><b>Errors:</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">28</td>
			<td>Only nested inner section summed</td>
			<td class="xl-num">30<br/><span class="xl-exp">=SUM(F3:F4)</span></td>
		</tr>
		<tr>
			<td class="xl-row">29</td>
			<td>Only part of section summed</td>
			<td class="xl-num">2<br/><span class="xl-exp">=SUM(C2:C5)</span></td>
		</tr>
		<tr>
			<td class="xl-row">30</td>
			<td>... Again</td>
			<td class="xl-num">9<br/><span class="xl-exp">=SUM(C4:C7)</span></td>
		</tr>
	</tbody>
</table>



	<p>What should these tests do (in pseudo-code)?</p>


	<h5>Nested sum</h5>
	<pre><code>r = 0
for (e : section()) {
    for (se : e.subsection()) {
        r += se.subvalue();
    }
}</code></pre>


	<h5>Sum spanning multiple sections</h5>
	<pre><code>r = -1 + 4 + 5
for (e : section()) {
    r += e.value();
}
for (e : othersection()) {
    r += e.value();
}</code></pre>


	<h5>Sum spanning multiple sections (shaped)</h5>
	<pre><code>r = -1 + -1 + 4 + 4 + 5 + 5
for (e : section()) {
    r += e.value();
    for (se : e.subsection()) {
        r += se.parent().repvalue();
    }
}
for (e : section2()) {
    r += e.value();
}</code></pre>


	<p>Peephole optimization might change <code>... + se.parent.repvalue()</code> to <code>... + e.repvalue()</code>.</p>


	<h5>Sum spanning multiple and nested sections</h5>
	<pre><code>r = -10 + 50 + 40
for (e : section()) {
    for (se : e.subsection()) {
        r += se.subvalue();
    }
}
for (e : section2()) {
    r += e.value2();
}</code></pre>


	<h5>Sum over inner refs</h5>
	<pre><code>r = 0
for (e : section()) {
    r += e.value();
}</code></pre>


	<h5>Sum over inner sums</h5>
	<pre><code>r = 0
for (e : section()) {
    r += helper( e );
}</code></pre>


	<p>where <code>helper( e )</code> is</p>

	<pre><code>r = 0
for (se : e.subsection()) {
    r + = se.subvalue() + se.subvalue() + se.parent.value();
}</code></pre>


	<h5>Sum over inner self sums</h5>
	<pre><code>r = 0
for (e : section()) {
    r += helper( e.parent ) + e.value();
}</code></pre>


	<p>where <code>helper( p )</code> is</p>

	<pre><code>r = 0
for (e : section()) {
    r += e.value();
}</code></pre>


	<h5>Sum over inner outer nested sums</h5>
	<pre><code>r = 0
for (e : section()) {
    r += helper( e.parent ) + e.value();
}</code></pre>


	<p>where <code>helper( p )</code> is</p>

	<pre><code>r = -10 + 50 + 40
for (e : p.section()) {
    for (se : e.subsection()) {
        r += se.subvalue();
    }
}
for (e : p.section2()) {
    r += e.value2();
}</code></pre>


	<h5>Sum over nested and inner section in parallel</h5>
	<pre><code>r = 0
for (e : section()) {
    r += e.value();
    for (se : e.subsection()) {
        r + = se.subvalue() + se.subvalue() + se.parent.value();
    }
}</code></pre>


	<p>Again, peephole optimization might change <code>... + se.parent.value()</code> to <code>... + e.value()</code>.</p>


	<h5>Sum over section and cells in parallel</h5>
	<pre><code>r = 4711 + 4712 + 4713 + 4714
for (e : section()) {
    r += e.value2();
}</code></pre>


	<h5>Sum over mixed section extents</h5>
	<pre><code>r = 0
for (e : section2()) {
    r += e.value2();
}
for (e : section3()) {
    r += e.value1() + e.value2() + e.value3();
}</code></pre>


	<h2><a name="pagetoc__4">Roadmap</a></h2>

	<p>The most important part right now is to support <code>DFOLD()</code> over vertical sections, excluding the label row. So that comes first.</p>


	<p>Next is supporting <code>DFOLD()</code> over nested vertical sections to enable 1:n join processing. This makes detection of 1:n repetition necessary.</p>


	<p>Finally, all currently unsupported cases should be rejected with helpful error messages.</p>


	<p>All the rest is nice, but not essential, as it can be worked around by judicious use of intermediate results (intermediate sums, for instance).</p>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="../../contribute/hacking/index.htm">Developer Documentation</a></div>
<div class="area"><a href="../../contribute/copyright.htm">Granting Of Rights</a></div>
<div class="area"><span class="selected"><a href="../../contribute/journal/index.htm">Peter's Journal</a></span></div>
<div class="nested">
<div class="area"><span class="selected">Ranges Overlapping Section Bounds</span></div>
<div id="page_toc"><div class="toc"><ul class="toc toc1"><li><a href="#pagetoc__1">Why Support Overlaps?</a></li><li><a href="#pagetoc__2">Test Setup</a></li><li><a href="#pagetoc__3">Test Cases</a></li><li><a href="#pagetoc__4">Roadmap</a></li></ul></div></div>
</div>
<div class="area"><a href="../../contribute/journal_old.htm">... Older Journal</a></div>
<div class="area"><a href="../../contribute/journal_older.htm">... Ancient Journal</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2008 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
