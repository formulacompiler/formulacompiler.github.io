<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>Scale vs. Precision with BigDecimal Engines - Abacus Formula Compiler for Java</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="../../style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="../../style_print.css" rel="stylesheet" type="text/css" media="print" />
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="download_band">
				<a href="../../download/index.htm">
					<img src="../../site_img/download_button.gif" />
				</a>
			</div>
			<div id="area_band">
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../../index.htm">Home</a> | 
						
					<a href="../../quick.htm">Quick Start</a> | <a href="../../doc/index.htm">Documentation</a> | <a href="../../download/index.htm">Download</a> | <a href="../../support.htm">Support</a> | <span class="selected"><a href="../../contribute/index.htm">Contribute</a></span>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../../index.htm">Home</a> &gt; <a href="../index.htm">Contribute</a> &gt; <a href="index.htm">Journal</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>Scale vs. Precision with BigDecimal Engines</h1>

	<p><span class="caps">AFC</span> currently uses a fixed scale for BigDecimal computations. For anything more complicated than basic addition, subtraction and multiplication, a minimum precision seems more desirable. Problem is, Abacus uses fixed scales internally, too. What do we do?</p>



	<h2><a name="pagetoc__1">Background</a></h2>

	<p>While implementing some financial functions as rewrite rules, Vladimir came across the problem that using fixed scale BigDecimals leads into trouble quickly as soon as one starts to divide numbers. So we first thought that simply switching to precision based arithmetic within rewrite rules might do the trick. However, fixed scales are hard on users of <span class="caps">AFC</span>, too.</p>


	<h2><a name="pagetoc__2">The Case For Precision</a></h2>

	<p>With fixed scales, you might already shoot yourself in the foot with a simple expression like <code>A1 * A2%</code>. This is because it is equivalent to <code>A1 * (A2 / 100)</code>. So for <code>A1 = 100000</code> and <code>A2 = 3.14159</code> we get:</p>

	<pre><code>(A2 / 100) = 0.031415
=&gt; A1 * A2% = A1 * (A2 / 100) = 3141.5</code></pre>


	<p>If instead we had written <code>A1 * A2 / 100</code>, which is the same as <code>(A1 * A2) / 100</code>, we would get the expected answer:</p>

	<pre><code>(A1 * A2) = 314159
=&gt; (A1 * A2) / 100 = 3141.59</code></pre>


	<p>And it only gets worse with more complicated formulae. With a minimal precision instead of a fixed scale this would not happen. <a href="http://www2.hursley.ibm.com/decimal/decifaq.html">IBM realized this</a> and launched <a href="http://jcp.org/en/jsr/detail?id=13">JSR-13</a> in the first place. In Section 2 of <span class="caps">JSR</span>-13, we find:</p>

<ul>
	<li>The fixed point (integer + scale) arithmetic is suitable for some tasks (such as calculating taxes or balancing a check book), but is inconvenient and awkward for many common applications. For example, calculating the total amount repaid on a mortgage over 20 years is difficult, requiring several steps which do not involve exact arithmetic and which may require explicit rounding. For this task (and many others) an arithmetic that allows working to a chosen precision is both simpler and more convenient.</li>
</ul>

	<h2><a name="pagetoc__3">The Case For Fixed Scale</a></h2>

	<p>I think we need to take to aspects into account here: the inherent merits of fixed scales and the landscape <span class="caps">AFC</span> will need to integrate with.</p>


	<h3><a name="pagetoc__3_1">Inherent Merits</a></h3>

	<p>With a fixed scale, you never lose digits except for those to the right of your fixed scale. This holds however big your numbers are. (This is called &#8220;arbitrary precision&#8221;.) With fixed precision, this is not true.</p>


	<h3><a name="pagetoc__3_2">Surrounding Landscape</a></h3>

	<p><span class="caps">AFC</span> is not a standalone product. It is a library designed to integrate well with, for example, financial applications. In particular, it will have to integrate perfectly with Abacus Software. And Abacus internally uses BigDecimal arithmetic with a fixed scale of 6. So, apart from everything else, switching to a minimum precision instead of a fixed scale in <span class="caps">AFC</span> might lead to two problems:</p>

<ul>
	<li>Users of Abacus Software might be surprised when they switch from a built-in formula to one they design themselves, but design it exactly the way the internal formula works. They might get subtly different results due to intermediate rounding effects.</li>
</ul>

<ul>
	<li>The problem stated above might prevent Abacus from starting to use <span class="caps">AFC</span> internally to design the built-in formulae. This could, however, be desirable as it would allow business analysts to supply formula definitions which could be integrated directly into the product&#8217;s build.</li>
</ul>

	<p>Finally, Abacus might not be the only financial software company to use BigDecimal like this. After all, <span class="caps">JSR</span>-13 support is not available in the mainstream for Java 1.4 and earlier (there are some <span class="caps">IBM</span> classes &#8211; the precursors of <span class="caps">JSR</span>-13).</p>


	<p>Here is an example. The scaled computation uses a fixed scale of 6. The minimum precision compuation uses 34 digits.</p>

	<pre><code>1.000001 / 4 + 0.000001 / 4
=&gt; 0.250000 (scale)
=&gt; 0.2500005 (precision)</code></pre>


	<p>If, on exit from <span class="caps">AFC</span>, both numbers are again converted to scale 6 with rounding mode <code>HALF_UP</code>, then we get</p>

	<pre><code>=&gt; 0.250000 (scale)
=&gt; 0.250001 (precision)</code></pre>


	<p>If this result is multiplied by a sufficiently large number, we can also see the effect at the cent or even dollar level.</p>


	<p>Is this example too contrived? I think not. Consider two values, each converted from a foreign currency and thus liable to have a non-zero last digit at scale 6. Then, for some reason, we take a percentage of each of the two values and add them up. In the example above, the two percentages just happen to conspire to make the addition with the increased precision cross the rounding threshold. This could happen in practice.</p>


	<h2><a name="pagetoc__4">What now?</a></h2>

	<p>It is not likely to be acceptable for Abacus and similar companies to have <span class="caps">AFC</span> return results that differ from their internal computations. I therefore suggest we support two flavours of <code>BigDecimal</code> computations: fixed scale and minimum precision.</p>


	<p>This does not solve the problem of the internal model of rewrite rules. I suggest we add syntax to allow the rules to temporarily switch to a precision-based numeric model. This model should probably be configurable, too. In many cases, using plain <code>double</code> should suffice. In special cases, one might want to use precision-based <code>BigDecimal</code>. Using <code>double</code> would be default.</p>


	<p>The choice of numeric models thus rests with the application, as does the burden of explaining the consequences like, for example, the effect of a fixed scale on the <code>%</code> operator to the spreadsheet designers (users and/or business analysts). <span class="caps">AFC</span>&#8217;s documentation should therefore provide guidance and documentation regarding this choice that can be reused in an application&#8217;s documentation.</p>


	<p>For the moment, we are only going to implement either precision-based BigDecimals (if Abacus can live with that, which looks likely), or else fixed scale BigDecimals which switch to precision-mode for internal functions. Scaled longs will not support switching for the moment. We&#8217;ll simply skip tests for them if they cause trouble as no one is using them at the moment.</p>


	<h2><a name="pagetoc__5">Implementation Notes</a></h2>

	<p>If we fix the precision-based internal model to be <code>double</code>, then it might be far easier to just implement the affected functions as plain Java support methods in the <code>RuntimeDouble_v1</code> class instead of as rewrite rules. This already happens anyway for things like <code>SQRT</code>. We could further simplify this by automatically generating stubs calling the <code>double</code> runtime for the runtimes of the other types.</p>


	<p>However, people using precision-based <code>BigDecimal</code> engines would expect all computations to use <code>BigDecimal</code>, not <code>double</code>, so this may not be a good decision.</p>


	<p>Here&#8217;s an example of what a rule with a switch to a precision-based model might look like:</p>

	<pre><code>def PMT( rate, nper, pv, fv, type )
    if rate = 0 then
        -(pv + fv) / nper
    else
        precision-model
        let
            a := (1 + rate) ^ nper
            b := pv / (1 - 1/a)
            c := fv / (a - 1)
            d := -(b + c) * rate
        in
            if type &gt; 0 then
                d / (1 + rate)
            else
                d</code></pre>


	<p>Internally, all values accessed by the expression within the <code>precision-model</code> block are converted to values of the precision-based type, and the final result is converted back. The conversion to the precision-based type should be implemented as implicit <code>let</code> definitions to avoid repeated conversions. If it makes the implementation easier, we might also consider using a <code>precision-model-let</code> where the required <code>let</code> definitions have to be specified explicitly.</p>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="../../contribute/hacking/index.htm">Developer Documentation</a></div>
<div class="area"><a href="../../contribute/copyright.htm">Granting Of Rights</a></div>
<div class="area"><span class="selected"><a href="../../contribute/journal/index.htm">Peter's Journal</a></span></div>
<div class="nested">
<div class="area"><span class="selected">Scale vs. Precision with BigDecimal Engines</span></div>
<div id="page_toc"><div class="toc"><ul class="toc toc1"><li><a href="#pagetoc__1">Background</a></li><li><a href="#pagetoc__2">The Case For Precision</a></li><li class="withitems"><a href="#pagetoc__3">The Case For Fixed Scale</a><ul class="toc toc2"><li><a href="#pagetoc__3_1">Inherent Merits</a></li><li><a href="#pagetoc__3_2">Surrounding Landscape</a></li></ul></li><li><a href="#pagetoc__4">What now?</a></li><li><a href="#pagetoc__5">Implementation Notes</a></li></ul></div></div>
</div>
<div class="area"><a href="../../contribute/journal_old.htm">... Older Journal</a></div>
<div class="area"><a href="../../contribute/journal_older.htm">... Ancient Journal</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2008 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
