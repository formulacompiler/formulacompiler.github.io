<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>AFC Developer&#8217;s Journal - Abacus Formula Compiler for Java</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="../style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="../style_print.css" rel="stylesheet" type="text/css" media="print" />

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-1112076-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="download_band">
				<a href="../download/index.htm">
					<img src="../site_img/download_button.gif" />
				</a>
			</div>
			<div id="area_band">
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../index.htm">Home</a> | 
						
					<a href="../quick.htm">Quick Start</a> | <a href="../doc/index.htm">Documentation</a> | <a href="../download/index.htm">Download</a> | <a href="../support/index.htm">Support</a> | <span class="selected"><a href="../contribute/index.htm">Contribute</a></span>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../index.htm">Home</a> &gt; <a href="index.htm">Contribute</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>AFC Developer&#8217;s Journal</h1>

	<p>These are oldish entries of my journal regarding the development of <span class="caps">AFC</span>. The <a href="dev/index.htm">newer entries</a> are on the main journal page. Note that the former name of <span class="caps">AFC</span> was <span class="caps">SEJ</span> (Spreadsheet Engine for Java).</p>



	<h2><a name="2006-09-12">September 12, 2006</a></h2>

	<h5><a name="pagetoc__1_1">Code Coverage</a></h5>

	<p>I have added code coverage analysis to <span class="caps">SEJ</span> using <a href="http://cobertura.sourceforge.net/">cobertura</a>. Overall results right now:</p>

<ul>
	<li>84% line coverage</li>
	<li>93% branch coverage</li>
</ul>

	<p>Not bad, eh? Nevertheless, this already helped identify a few untested areas:</p>

<ul>
	<li>value conversions in bytecode type compilers</li>
	<li>lots of error handling in the bytecode compiler</li>
	<li>compilation of comparison in <code>IF</code> with inverse branch target (<code>TestCompilerBranchingWhenTrue</code>)</li>
	<li>literal pattern chars in string pattern expressions</li>
	<li>some sheet builder constructs are untested</li>
	<li>no test of auto-mark-support of engine loader input stream</li>
</ul>

	<p>Some leaks are caused by <span class="caps">JRE 1</span>.4, which is not run during coverage analysis right now. Many others are due to untested error cases (<code>throw</code>).</p>


	<h2><a name="2006-08-30">August 30, 2006</a></h2>

	<h5><a name="pagetoc__2_1">Reference Tests</a></h5>

	<p>I have restructured the Excel function tests. They are no longer a single big sheet, but split into multiple sheets. The code which runs these tests has also seen some improvements:</p>

<ul>
	<li><code>BigDecimal</code> tests now check for the proper scale of returned values.</li>
</ul>

<ul>
	<li>Tests with dynamic inputs are now run with all possible permutations of bound and unbound input cells (which, alas, makes the running time of a full system test significant even on my fast machine).</li>
</ul>

<ul>
	<li>The values of bound input cells are temporarily modified so the tests would detect if <span class="caps">SEJ</span> still uses the constant cell value instead of the bound input.</li>
</ul>

<ul>
	<li>The test code is itself tested for whether it really tests the way it should.</li>
</ul>

	<p>In addition to this, the tests automatically emit <span class="caps">HTML</span> fragment files which document the test cases. They are then included in the <a href="reference/index.htm">reference</a>, again making sure I cite proven results.</p>


	<h2><a name="2006-08-23">August 23, 2006</a></h2>

	<h5><a name="pagetoc__3_1">Constant Folding</a></h5>

	<p>I am implementing string-valued expressions. Pondering how to implement <code>CONCATENATE</code> and the <code>&#38;</code> operator efficiently, I started thinking again about a still pending constant folder optimization:</p>


<pre><code>  1 + 2 + x + 3  =  6 + x
</code></pre>
	<p>Currently, I do <code>(3 + x) + 3</code>. Then again, what about this one:</p>


<pre><code>  999..9 + x + 10  =  (999..9 + 10) + x
</code></pre>
	<p>assuming that <code>999..9</code> is the highest number representable by the given numeric type (for example, the maximum <code>long</code> value). All <code>x</code> less than -9 will make this expression work. But folding prematurely to <code>(999..9 + 10) + x</code> will lead to an overflow in the folder. Meaning this type of optimization is only useful for freely scaled <code>BigDecimal</code>. Not your typical case.</p>


	<p>How about the optimizer only handling consecutive runs of terms, as in:</p>


<pre><code>  x + 1 + 2  =  x + 3
</code></pre>
	<p>which currently is represented internally as <code>(x + 1) + 2</code> and thus not optimized at all? Or:</p>


<pre><code>  x + 1 - 2 + 3  =  x + 2
</code></pre>
	<p>which I want to first transform into <code>(x + 1 + (-2) + 3)</code> and then fold. Is this safe? Let&#8217;s see:</p>


<pre><code>  x + 99..9 + 10  =  x + (99..9 + 10)
</code></pre>
	<p>again overflows in the folder, but <code>x &lt;= -10</code> would make it work. With <code>double</code>, I can construct pathological cases, too:</p>


<pre><code>  x + 1e10 + 1e-10  =  x  + (1e10 + 1e-10)
</code></pre>
	<p>The folder will reduce this (due to rounding) to <code>x + 1e10</code>, but for <code>x = -1e10</code>, the result of the original expression would be <code>1e-10</code>. For the folded expression it is <code>0</code>.</p>


	<p>This got me wondering. And I found that the Java compiler does not, in fact, fold such expressions either. It does not even optimize things like:</p>


<pre><code>  x + "a" + "b"  =  x + "ab" 
</code></pre>
	<p>while it does optimize <code>x + ("a" + "b")</code> and <code>"a" + "b" + x</code>. This seems to imply that the Java folder is just as dumb as my folder currently is, following the normal parse tree structure which would render the latter as <code>("a" + "b") + x</code> and the first, non-optimized one as <code>(x + "a") + "b"</code> which now contains no foldable term.</p>


	<p>Given all this, I shall, for the moment, confine myself to handling only string concatenation smartly. There can be no overflow or rounding conditions there that would not occur anyway because concatenation never takes data away from the string.</p>


	<h5><a name="pagetoc__3_2">Side Note</a></h5>

	<p>This means that things like:</p>


<pre><code>  private static final String A = "A";
  private static final String B = "B";
  private final String fn( String x ) {
    return x + A + B;
  }
</code></pre>
	<p>should always be coded as:</p>


<pre><code>  private final String fn( String x ) {
    return x + (A + B);
  }
</code></pre>
	<p>if <code>fn</code> is being used in a performance critical region.</p>


	<h2><a name="pagetoc__4">August 17, 2006</a></h2>

	<p>I have fixed the <span class="caps">JRE 1</span>.4 tests and, at the same time, upgraded to the latest version of Retrotranslator. This allowed me to finally change the way I handle things like <code>BigDecimal.precision()</code>, which neither the <span class="caps">JRE 1</span>.4 nor Retrotranslator support. I now compile helper classes giving access to such functions and run Retrotranslator on them in unverified mode. Then, at runtime, I simply do not call them on the <span class="caps">JRE 1</span>.4 (by checking the system version). This approach was suggested by the author of Retrotranslator, who is very helpful.</p>


	<h2><a name="pagetoc__5">August 15, 2006</a></h2>

	<p>Marcel and Dejan have found a problem with Abacus&#8217;s own custom class loader and the way <span class="caps">SEJ</span> instantiates its engines. I need to add a configuration option to <span class="caps">SEJ</span> so you can specify the parent class loader for the engines. The easiest way would be to add static member to <code>SEJRuntime</code>. However, I generally don&#8217;t like <code>static</code> config, because the decision of what is a singleton environment and what not should really reside with the application, not the library. So that leaves me with two options:</p>

<ul>
	<li>pass the parent class loader to the engine compilation and loading methods, or</li>
	<li>make <code>SEJRuntime</code> and, consequently, <code>SEJ</code> instantiable classes instead of namespaces for a bunch of static methods.</li>
</ul>

	<p>Since I don&#8217;t like cluttering the compilation and loading methods with this parameter, and since there might be even more config values in the future, I attempted to take the second route. This meant an <span class="caps">API</span> change. But with only two external projects using <span class="caps">SEJ</span> so far, I decided to do it. Seems I was wrong, though.</p>


	<p>I quickly realized that this would mean having to make all the top-level doer classes newly hold a reference to the <code>SEJ</code> instance that created them. This, however, would couple together the entire range of subsystems of <span class="caps">SEJ</span> &#8211; clearly a bad thing. So I shall revert to adding a parameter.</p>


	<p>...</p>


	<p>Did this. And discovered, to my horror, that all my ant builds never ran the tutorial tests. The include filter did not catch them. I have changed that now and found that some of my type conversions do not work with <span class="caps">JRE 1</span>.4. So I need to fix this before I can get on with new features.</p>


	<h2><a name="pagetoc__6">July 11, 2006</a></h2>

	<h5><a name="pagetoc__6_1">Citing Excel</a></h5>

	<p>Picking up on the ideas from June 30, I added support for citing Excel spreadsheets to <a href="http://arrenbrecht.ch/jcite/">JCite</a>. Now the <span class="caps">SEJ</span> documentation has <a href="tutorial/repeatingsections.htm">example spreadsheets</a> in it that are automatically tested and nicely formatted with every release. Cool.</p>


	<h2><a name="pagetoc__7">July 6, 2006</a></h2>

	<p>Been busy implementing repeating sections. Read-only version is nearly finished. Just realized that engines with repeating sections will need to be resettable because the section collections are always cached.</p>


	<h2><a name="pagetoc__8">June 30, 2006</a></h2>

	<h3><a name="pagetoc__8_1">Authoring Sheets</a></h3>

	<p>I have been thinking some more about the people who will have to author custom computations as spreadsheets. While <span class="caps">SEJ</span> must be able to work with almost any sheet, we should still strive to provide a more pleasurable experience to sheet authors than just basic Excel. Here are my current ideas:</p>

<ul>
	<li>Write an Excel add-in that makes managing names easier. Might be a task-pane that lists all names and translates mangled parametrized calls to proper syntax. (For example: <code>valueFor.1994</code> becomes <code>valueFor( 1994 )</code>.)</li>
</ul>

<ul>
	<li>Write an Excel add-in that reads an i/o definition generated from the respective Java interfaces for the sheet. Then allow the user to paste the proper names onto cells. Could also support validation of existing names (much like the binder later does, too).</li>
</ul>

<ul>
	<li>Use color to distinguish input and output cells in the automatic, reflective binder.</li>
</ul>

<ul>
	<li>Write a tool that generates end-user documentation for the defined i/o names given the respective Java interfaces.</li>
</ul>

<ul>
	<li>Write a tool that can embed sample Excel sheets in <span class="caps">HTML</span> documentation (and maybe FO), complete with name annotations and formula display. This would also come in handy in the documentation of <span class="caps">SEJ</span> itself. In fact, what I need to document for my sample use-cases is exactly of the same sort as what applications will have to document for the specific computations they make customizable.</li>
</ul>

	<p><a href="mailto:peo@arrenbrecht.ch">Feedback welcome!</a></p>


	<h3><a name="DynamicParams">Dynamic Parameters</a></h3>

	<p>I have started the use-case tests and tutorial on basic repeating sections. The first example is computing a customer rating given the totals of the orders for the last 3 months. With the current version of <span class="caps">SEJ</span>, the best we can do is something like:</p>


<pre><code>public OrderData[] ordersForLastNDays( int _days );
</code></pre>
	<p>However, it would be more natural to have something like:</p>


<pre><code>public OrderData[] ordersByDate( Date _from, Date _to );
</code></pre>
	<p>This is not something we can bind to with <span class="caps">SEJ</span> today. And even if we could, we would have to bind the date arguments <em>statically</em>. But they need to be dynamic, computed relative to the current date. This could be done in Excel. So we would need a way to bind an input call so that its parameters are bound to other cells. For example:</p>


<pre><code>   A               B
1  Today           =Date()
2  StartDate       =... (formula that computes the start of the 3 month period)
3  EndDate         =... (formula that computes the end of the 3 month period)
4
5  Order Date      Order Total
6  1.1.2000        1000.00
7  1.2.2000        1300.00
</code></pre>
	<p>We would want to bind the range <code>A6:B7</code> as a repeating section to <code>ordersByDate( StartDate, EndDate )</code>. For example, by naming it, in Excel, <code>ordersByDate.__StartDate.__EndDate</code>.</p>


	<p>This is quite feasible. But something for a future version of <span class="caps">SEJ</span>. And I am not sure your typical Excel user could handle the complexity.</p>


	<h2><a name="pagetoc__9">June 28, 2006</a></h2>

	<p>I am currently focusing on things needed by the two first Abacus projects that will use <span class="caps">SEJ</span>. It&#8217;s great to finally have real projects use <span class="caps">SEJ</span>. Generates lots of feedback regarding usability of the <span class="caps">API</span> and functionality.</p>


	<h3><a name="pagetoc__9_1">Estimates</a></h3>

	<p>I was a bit disappointed that my initial estimate of the project was so hopelessly wrong &#8211; thank God Claudio had a much better idea of how long it would take. On closer inspection, though, I believe I can somewhat defend my initial guess. I did, after all, change requirements for the project in mid-flight more than once, and quite fundamentally (think byte-code, think sections). Given that I am practically the only one on the change board right now, such things happen a little informally and, thus, are sometimes hard to discern for what they are. Nevertheless, the laurels for the most realistic estimate for the big picture of the project go to Claudio. Thanks, man!</p>


	<h3><a name="pagetoc__9_2">API Redesign</a></h3>

	<p>As I said, I much redesigned the <span class="caps">API</span> for <a href="releasenotes.htm#0.5.0">release 0.5.0</a>. Why was that? It really was a culmination of various separate nagging doubts and ideas that I&#8217;d been harboring for a while (and which Igor reinforced):</p>


	<p>Standardization</p>

<ul>
	<li>Establish and document a set of best practices on how to use <span class="caps">SEJ</span>. This includes using cell and range names, reflection for binding cells to methods, and warning users when something looks fishy (like unbound named cells).</li>
</ul>

<ul>
	<li>Encourage people to follow to the best practices established by said use-case by way of making it the simplest to do. This might help to attain a certain unformity of uses of <span class="caps">SEJ</span>, which, in turn, will make it easier to change particulars of the lower-level <span class="caps">API</span> in the future.</li>
</ul>

	<p><span class="caps">API</span> Improvements</p>

<ul>
	<li>Introduce a straightforward <span class="caps">API</span> for the standard use-case, following said best practices. People don&#8217;t want to see complexity when they don&#8217;t need it.</li>
</ul>

<ul>
	<li>Add support for application-defined computation factories to reduce the application&#8217;s dependence on <span class="caps">SEJ</span>.</li>
</ul>

<ul>
	<li>Offer the lower-level, more complex <span class="caps">API</span> to people needing the added control and power.</li>
</ul>

<ul>
	<li>Make the lower-level <span class="caps">API</span> more flexible by separating phases (load sheet, bind cells, compile to internal model, compile to engine).</li>
</ul>

<ul>
	<li>Expose the internal computation model as a separate way of specifying an engine. I have not done this yet, but prepared the <span class="caps">API</span> so that it would be easy to do so.</li>
</ul>

	<p>Defensible <span class="caps">API</span></p>

<ul>
	<li>Enforce a strict separation between internal and public parts. Given Java&#8217;s insufficient visiblity control (no <em>friends</em>), I copied the approach taken by Sun and Eclipse by moving all internals into the <code>sej.internal</code> package.</li>
</ul>

<ul>
	<li>Expose only interfaces to strictly control what features users can see.</li>
</ul>

	<p>What finally prompted me to do this redesign was when, in order to implement <a href="tutorial/type_conversion.htm">automatic type conversions</a>, I needed the <a href="tutorial/basics.htm">introductory example</a> to <span class="caps">SEJ</span>. This example, of course, would have to be the standard use-case for <span class="caps">SEJ</span>, showcasing the best practices!</p>


	<h2><a name="pagetoc__10">June 20, 2006</a></h2>

	<p><a href="releasenotes.htm">Release 0.5.0</a> is out the door. This has been a <strong>major</strong> API redesign, caused by the need for a simplified initial user experience with <span class="caps">SEJ</span>. The standard use-case is now just a few lines.</p>


	<p>I shall have to take some time to write down all the thoughts that led to this redesign.</p>


	<h2><a name="pagetoc__11">Even Older Entries</a></h2>

	<p>...can be <a href="dev_old.htm">found here</a>.</p>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="http://groups.google.com/group/formulacompiler-users">Discussion Forum</a></div>
<div class="area"><a href="http://formulacompiler.org/trac/wiki">Wiki</a></div>
<div class="area"><a href="http://formulacompiler.org/trac/report">Bug Reports</a></div>
<div class="area"><a href="../contribute/hacking/index.htm">Developer Documentation</a></div>
<div class="area"><a href="../contribute/copyright.htm">Granting Of Rights</a></div>
<div class="area"><a href="../contribute/journal/index.htm">Peter's Journal</a></div>
<div class="area"><span class="selected">... Older Journal</span></div>
<div id="page_toc"><div class="toc"><ul class="toc toc1"><li class="withitems"><a href="#2006-09-12">September 12, 2006</a><ul class="toc toc4"><li><a href="#pagetoc__1_1">Code Coverage</a></li></ul></li><li class="withitems"><a href="#2006-08-30">August 30, 2006</a><ul class="toc toc4"><li><a href="#pagetoc__2_1">Reference Tests</a></li></ul></li><li class="withitems"><a href="#2006-08-23">August 23, 2006</a><ul class="toc toc4"><li><a href="#pagetoc__3_1">Constant Folding</a></li><li><a href="#pagetoc__3_2">Side Note</a></li></ul></li><li><a href="#pagetoc__4">August 17, 2006</a></li><li><a href="#pagetoc__5">August 15, 2006</a></li><li class="withitems"><a href="#pagetoc__6">July 11, 2006</a><ul class="toc toc4"><li><a href="#pagetoc__6_1">Citing Excel</a></li></ul></li><li><a href="#pagetoc__7">July 6, 2006</a></li><li class="withitems"><a href="#pagetoc__8">June 30, 2006</a><ul class="toc toc2"><li><a href="#pagetoc__8_1">Authoring Sheets</a></li><li><a href="#DynamicParams">Dynamic Parameters</a></li></ul></li><li class="withitems"><a href="#pagetoc__9">June 28, 2006</a><ul class="toc toc2"><li><a href="#pagetoc__9_1">Estimates</a></li><li><a href="#pagetoc__9_2">API Redesign</a></li></ul></li><li><a href="#pagetoc__10">June 20, 2006</a></li><li><a href="#pagetoc__11">Even Older Entries</a></li></ul></div></div>
<div class="area"><a href="../contribute/journal_older.htm">... Ancient Journal</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2008 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
