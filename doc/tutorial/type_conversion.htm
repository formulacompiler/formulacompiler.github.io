<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>Type Conversions - Abacus Formula Compiler for Java</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="../../style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="../../style_print.css" rel="stylesheet" type="text/css" media="print" />
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="download_band">
				<a href="../../download/index.htm">
					<img src="../../site_img/download_button.gif" />
				</a>
			</div>
			<div id="area_band">
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../../index.htm">Home</a> | 
						
					<a href="../../quick.htm">Quick Start</a> | <span class="selected"><a href="../../doc/index.htm">Documentation</a></span> | <a href="../../download/index.htm">Download</a> | <a href="../../support/index.htm">Support</a> | <a href="../../contribute/index.htm">Contribute</a>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../../index.htm">Home</a> &gt; <a href="../index.htm">Documentation</a> &gt; <a href="index.htm">Tutorial</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>Type Conversions</h1>

	<p>Engines generated by <span class="caps">AFC</span> perform all internal computations using a <a href="numeric_type.htm#GlobalSetting">single</a>, user-defined <a href="numeric_type.htm">numeric type</a>. At the moment, this can be <code>double</code>, <code>BigDecimal</code>, <code>long</code>, or <a href="numeric_type.htm#long">scaled <code>long</code></a>. The engine therefore must</p>

<ul>
	<li>convert all <a href="#Inputs">input values</a> obtained from your input methods to its internal type, and</li>
	<li>convert all <a href="#Outputs">output values</a> from its internal type to the return type of your output methods.</li>
</ul>

	<p>To convert other value types to those <span class="caps">AFC</span> can handle, you should <a href="avoid_dependencies.htm">wrap your interfaces</a> to add custom conversion logic. You might also want to do this to keep your interfaces clean of dependencies on <span class="caps">AFC</span> specifics (such as the <code>ScaledLong</code> and <code>Milliseconds</code> annotations).</p>


	<h2><a name="Inputs">Input Conversions</a></h2>

	<p>Here&#8217;s the set of supported input types (the <code>ScaledLong</code> annotation works with all supported scales, not just <code>7</code>, of course):</p>

	<pre class="java"><span class="j-cmt">// Native types
</span><span class="j-typ">byte </span>getByte<span class="j-sym">()</span>;
<span class="j-typ">short </span>getShort<span class="j-sym">()</span>;
<span class="j-typ">int </span>getInt<span class="j-sym">()</span>;
<span class="j-typ">long </span>getLong<span class="j-sym">()</span>;
@ScaledLong<span class="j-sym">( </span><span class="j-num">7 </span><span class="j-sym">) </span><span class="j-typ">long </span>getLong7<span class="j-sym">()</span>;
<span class="j-typ">double </span>getDouble<span class="j-sym">()</span>;
<span class="j-typ">float </span>getFloat<span class="j-sym">()</span>;
<span class="j-typ">boolean </span>getBoolean<span class="j-sym">()</span>;

<span class="j-cmt">// Boxed native types
</span>Byte getBoxedByte<span class="j-sym">()</span>;
Short getBoxedShort<span class="j-sym">()</span>;
Integer getBoxedInt<span class="j-sym">()</span>;
Long getBoxedLong<span class="j-sym">()</span>;
@ScaledLong<span class="j-sym">( </span><span class="j-num">7 </span><span class="j-sym">) </span>Long getBoxedLong7<span class="j-sym">()</span>;
Double getBoxedDouble<span class="j-sym">()</span>;
Float getBoxedFloat<span class="j-sym">()</span>;
Boolean getBoxedBoolean<span class="j-sym">()</span>;

<span class="j-cmt">// Big types
</span>BigDecimal getBigDecimal<span class="j-sym">()</span>;
BigInteger getBigInteger<span class="j-sym">()</span>;

<span class="j-cmt">// Date is converted to a number as in Excel; can also use long value as returned by
// Date.getTime().
// These values are time-zone adjusted.
</span>Date getDate<span class="j-sym">()</span>;
@MillisecondsSinceUTC1970 <span class="j-typ">long </span>getDateMs<span class="j-sym">()</span>;
@MillisecondsSinceUTC1970 Long getBoxedDateMs<span class="j-sym">()</span>;

<span class="j-cmt">// With @Milliseconds annotation, long is treated as a time duration in milliseconds for an
// Excel time cell.
// These values or *not* time-zone adjusted.
</span>@Milliseconds <span class="j-typ">long </span>getTime<span class="j-sym">()</span>;
@Milliseconds Long getBoxedTime<span class="j-sym">()</span>;

<span class="j-cmt">// String cannot be used for numbers, but for string-valued cells
</span>String getString<span class="j-sym">()</span>;</pre>


	<p>The rules are:</p>

<ul>
	<li>Values are silently truncated or reduced in precision to fit the target type (like Java does).</li>
	<li>Dates are converted to local time using the time zone as specified in the <a href="locale.htm">factory configuration</a>.</li>
	<li>Pure times <strong>must not</strong> be passed a <code>java.util.Date</code> &#8211; <a href="datetime.htm">here&#8217;s why</a>.</li>
	<li><code>null</code> values are silently converted to zero (unlike Java).</li>
</ul>

	<h5>Warning</h5>

	<p>The latter rule is different from Excel, which converts empty cells situatively. An empty cell is, for instance, ignored by <code>PRODUCT</code> and string concatenation in Excel. As of this version of <span class="caps">AFC</span>, a <code>PRODUCT</code> involving an input value which is <code>null</code> returns zero, not the product of all non-null numbers.
<br /><strong>This may change to be more compatible with Excel in a future release of <span class="caps">AFC</span>.</strong></p>


	<h2><a name="Outputs">Output Conversions</a></h2>

	<p>The set of supported output types is the same as that for input types (again, the <code>ScaledLong</code> annotation works with all supported scales, not just <code>7</code>):</p>

	<pre class="java"><span class="j-cmt">// Native types
</span><span class="j-typ">byte </span>calcByte<span class="j-sym">()</span>;
<span class="j-typ">short </span>calcShort<span class="j-sym">()</span>;
<span class="j-typ">int </span>calcInt<span class="j-sym">()</span>;
<span class="j-typ">long </span>calcLong<span class="j-sym">()</span>;
@ScaledLong<span class="j-sym">( </span><span class="j-num">5 </span><span class="j-sym">) </span><span class="j-typ">long </span>calcLong5<span class="j-sym">()</span>;
<span class="j-typ">double </span>calcDouble<span class="j-sym">()</span>;
<span class="j-typ">float </span>calcFloat<span class="j-sym">()</span>;
<span class="j-typ">boolean </span>calcBoolean<span class="j-sym">()</span>;

<span class="j-cmt">// Boxed native types
</span>Byte calcBoxedByte<span class="j-sym">()</span>;
Short calcBoxedShort<span class="j-sym">()</span>;
Integer calcBoxedInt<span class="j-sym">()</span>;
Long calcBoxedLong<span class="j-sym">()</span>;
@ScaledLong<span class="j-sym">( </span><span class="j-num">5 </span><span class="j-sym">) </span>Long calcBoxedLong5<span class="j-sym">()</span>;
Double calcBoxedDouble<span class="j-sym">()</span>;
Float calcBoxedFloat<span class="j-sym">()</span>;
Boolean calcBoxedBoolean<span class="j-sym">()</span>;

<span class="j-cmt">// Big types
</span>BigDecimal calcBigDecimal<span class="j-sym">()</span>;
BigInteger calcBigInteger<span class="j-sym">()</span>;

<span class="j-cmt">// Date is converted from a number as in Excel; can also use long value as in &#34;new
// Date(long)&#34;.
// These values are time-zone adjusted.
</span>Date calcDate<span class="j-sym">()</span>;
@MillisecondsSinceUTC1970 <span class="j-typ">long </span>calcDateMs<span class="j-sym">()</span>;
@MillisecondsSinceUTC1970 Long calcBoxedDateMs<span class="j-sym">()</span>;

<span class="j-cmt">// With @Milliseconds annotation, long is converted from an Excel time cell to a time duration
// in milliseconds.
// These values are *not* time-zone adjusted.
</span>@Milliseconds <span class="j-typ">long </span>calcTime<span class="j-sym">()</span>;
@Milliseconds Long calcBoxedTime<span class="j-sym">()</span>;

<span class="j-cmt">// Strings are converted according to Java's settings
</span>String calcString<span class="j-sym">()</span>;</pre>


	<p>The rules are similar, too:</p>

<ul>
	<li>Values are silently truncated or reduced in precision to fit the target type (like Java does).</li>
	<li>Dates are converted from local time using the time zone as specified in the <a href="locale.htm">factory configuration</a>.</li>
	<li>Pure times <strong>must not</strong> be returned as <code>java.util.Date</code> &#8211; <a href="datetime.htm">here&#8217;s why</a>.</li>
	<li><span class="caps">AFC</span> never returns <code>null</code>.</li>
</ul>

	<h5>Warning</h5>

	<p>The latter rule implies that, even if you map an output method to an empty spreadsheet cell, or to one that is mapped to an input method returning <code>null</code>, <span class="caps">AFC</span> will return zero, not <code>null</code>.
<br /><strong>This may change in a future release of <span class="caps">AFC</span>.</strong></p>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="../../doc/design.htm">Design Overview</a></div>
<div class="area"><span class="selected"><a href="../../doc/tutorial/index.htm">Tutorial</a></span></div>
<div class="nested">
<div class="area"><span class="selected">Type Conversions</span></div>
</div>
<div class="area"><a href="../../doc/reference/index.htm">Function Reference</a></div>
<div class="area"><a href="../../doc/javadoc/index.html">API Reference</a></div>
<div class="area"><a href="../../doc/examples/index.htm">Sample Applications</a></div>
<div class="area"><a href="../../doc/impl/index.htm">Implementation Details</a></div>
<div class="area"><a href="../../doc/limitations.htm">Limitations</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2008 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
