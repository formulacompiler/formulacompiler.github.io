<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>Logging Intermediate Values - Abacus Formula Compiler for Java</title>
    <style media="screen" type="text/css">
		
    </style>
	<link href="../../style_screen.css" rel="stylesheet" media="screen" type="text/css" /><link href="../../style_print.css" rel="stylesheet" media="print" type="text/css" />

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-1112076-2");
pageTracker._initData();
pageTracker._trackPageview();
</script>
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="area_band">
				<div id="download_band">
					<a href="../../download/index.htm">
						<img src="../../site_img/download_button.png" />
					</a>
				</div>
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../../index.htm">Home</a> | 
						
					<a href="../../quick.htm">Quick Start</a> | <span class="selected"><a href="../../doc/index.htm">Documentation</a></span> | <a href="../../download/index.htm">Download</a> | <a href="../../support/index.htm">Support</a> | <a href="../../contribute/index.htm">Contribute</a>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../../index.htm">Home</a> &gt; <a href="../index.htm">Documentation</a> &gt; <a href="index.htm">Tutorial</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>Logging Intermediate Values</h1>

	<p>Sometimes, especially when debugging, you want to track how output values of a computation are calculated. <span class="caps">AFC</span> allows you to register listeners for such calculations both at compile-time (for constant folding) and at run-time.</p>



	<h2><a name="example_1">Basic Example</a></h2>

	<h5>Sample spreadsheet</h5>

	<p>The use case is very simple. The spreadsheet computes the volume of a cube:</p>

	<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>Length</td>
			<td class="xl-num">2</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>Width</td>
			<td class="xl-num">3</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>Height</td>
			<td class="xl-num">5</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>Area</td>
			<td class="xl-num">6<br/><span class="xl-exp">=B1*B2</span></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><span style="text-decoration: underline;">Volume</span></td>
			<td class="xl-num">30<br/><span class="xl-exp">=B4*B3</span></td>
		</tr>
	</tbody>
</table>



	<p>We provide dimensions as <code>Inputs</code> class:</p>

	<pre class="java"><span class="j-key">public static class </span>Inputs
<span class="j-sym">{
  </span><span class="j-key">public </span><span class="j-typ">double </span><span class="j-hl">getLength<span class="j-sym">()</span></span>
  <span class="j-sym">{
    </span><span class="j-key">return </span><span class="j-num">7</span>;
  <span class="j-sym">}

  </span><span class="j-key">public </span><span class="j-typ">double </span><span class="j-hl">getWidth<span class="j-sym">()</span></span>
  <span class="j-sym">{
    </span><span class="j-key">return </span><span class="j-num">11</span>;
  <span class="j-sym">}

  </span><span class="j-key">public </span><span class="j-typ">double </span><span class="j-hl">getHeight<span class="j-sym">()</span></span>
  <span class="j-sym">{
    </span><span class="j-key">return </span><span class="j-num">13</span>;
  <span class="j-sym">}
}</span></pre>


	<p>and receive the volume in the <code>Outputs</code> interface:</p>

	<pre class="java"><span class="j-bkg">  </span><span class="j-key">public static interface </span>Outputs
  <span class="j-sym">{
    </span><span class="j-typ">double </span><span class="j-hl">getVolume<span class="j-sym">()</span></span>;
  <span class="j-sym">}</span></pre>


	<h5>Compile with listener support</h5>

	<p>Listener support must be explicitly enabled when compiling the engine as it affects engine performance (even when no listener is registered):</p>

	<pre class="java"><span class="j-key">final </span>EngineBuilder b = SpreadsheetCompiler.newEngineBuilder<span class="j-sym">()</span>;
b.loadSpreadsheet<span class="j-sym">( </span>getFile<span class="j-sym">() )</span>;
b.setInputClass<span class="j-sym">( </span>Inputs.<span class="j-key">class </span><span class="j-sym">)</span>;
b.setOutputClass<span class="j-sym">( </span>Outputs.<span class="j-key">class </span><span class="j-sym">)</span>;
b.createCellNamesFromRowTitles<span class="j-sym">()</span>;
b.bindAllByName<span class="j-sym">()</span>;
b.<span class="j-hl">setComputationListenerEnabled<span class="j-sym">( </span><span class="j-key">true </span><span class="j-sym">)</span></span>;
<span class="j-key">final </span>SaveableEngine e = b.compile<span class="j-sym">()</span>;</pre>


	<h5>Logging computed values</h5>

	<p>The next step is creating a listener and attaching it to the computation. A listener must implement the <a href="../javadoc/org/formulacompiler/runtime/event/CellComputationListener.html"><code>CellComputationListener</code></a> interface. It will be invoked every time the engine computes a value of a cell and will receive the cell&#8217;s address and the computed value.</p>


	<p>A simple listener is used in this example. It puts received events in a list:</p>

	<pre class="java"><span class="j-key">private class </span>TestComputationListener <span class="j-key">implements </span><span class="j-hl">CellComputationListener</span>
<span class="j-sym">{
  </span><span class="j-key">final </span>List&lt;SpreadsheetCellComputationEvent&gt; events = New.list<span class="j-sym">()</span>;

  <span class="j-key">public </span><span class="j-typ">void </span><span class="j-hl">cellCalculated</span><span class="j-sym">( </span><span class="j-hl">CellComputationEvent</span> _event <span class="j-sym">)
  {
    </span><span class="j-key">this</span>.events.add<span class="j-sym">( (</span>SpreadsheetCellComputationEvent<span class="j-sym">) </span>_event <span class="j-sym">)</span>;
  <span class="j-sym">}
}</span></pre>


	<p>We pass an instance of the listener when creating computation factory using <a href="../javadoc/org/formulacompiler/runtime/Computation.Config.html"><code>Computation.Config</code></a>:</p>

	<pre class="java"><span class="j-key">final </span>Computation.Config config = <span class="j-hl">new Computation.Config<span class="j-sym">()</span></span>;
<span class="j-key">final </span>TestComputationListener listener = <span class="j-key">new </span>TestComputationListener<span class="j-sym">()</span>;
config.<span class="j-hl">cellComputationListener</span> = listener;
<span class="j-key">final </span>ComputationFactory f = e.getComputationFactory<span class="j-sym">( </span><span class="j-hl">config</span> <span class="j-sym">)</span>;</pre>


	<p>Now we are ready to perform the computation:</p>

	<pre class="java"><span class="j-key">final </span>Outputs c = <span class="j-sym">(</span>Outputs<span class="j-sym">) </span>f.newComputation<span class="j-sym">( </span><span class="j-key">new </span>Inputs<span class="j-sym">() )</span>;
assertEquals<span class="j-sym">( </span><span class="j-num">1001.0</span>, c.getVolume<span class="j-sym">()</span>, <span class="j-num">1e-10 </span><span class="j-sym">)</span>;</pre>


	<p>Let&#8217;s see what events we have received:</p>

	<pre class="java">assertEquals<span class="j-sym">( </span><span class="j-num">5</span>, listener.events.size<span class="j-sym">() )</span>;
assertEvent<span class="j-sym">( </span><span class="j-str">&#34;-&gt; 7.0 in Sheet1!B1(Length)&#34;</span>, listener.events.get<span class="j-sym">( </span><span class="j-num">0 </span><span class="j-sym">) )</span>;
assertEvent<span class="j-sym">( </span><span class="j-str">&#34;-&gt; 11.0 in Sheet1!B2(Width)&#34;</span>, listener.events.get<span class="j-sym">( </span><span class="j-num">1 </span><span class="j-sym">) )</span>;
assertEvent<span class="j-sym">( </span><span class="j-str">&#34;77.0 in Sheet1!B4(Area)&#34;</span>, listener.events.get<span class="j-sym">( </span><span class="j-num">2 </span><span class="j-sym">) )</span>;
assertEvent<span class="j-sym">( </span><span class="j-str">&#34;-&gt; 13.0 in Sheet1!B3(Height)&#34;</span>, listener.events.get<span class="j-sym">( </span><span class="j-num">3 </span><span class="j-sym">) )</span>;
assertEvent<span class="j-sym">( </span><span class="j-str">&#34;&lt;- 1001.0 in Sheet1!B5(Volume)&#34;</span>, listener.events.get<span class="j-sym">( </span><span class="j-num">4 </span><span class="j-sym">) )</span>;</pre>


	<h2><a name="pagetoc__2">Repeating Sections</a></h2>

	<p>An expression in a cell in a repeating section is calculated for each section&#8217;s input data object. The <a href="../javadoc/org/formulacompiler/runtime/spreadsheet/SpreadsheetCellComputationEvent.html"><code>SpreadsheetCellComputationEvent</code></a> event contains information about the section&#8217;s name and instance number. The numbering starts from zero and has nothing to do with row or column numbers in the source worksheet. It is more like an index into the collection that drives the repeating section at run-time.</p>


	<h5>Example</h5>

	<p>Let&#8217;s watch how the values are computed in the <a href="repeatingsections_withoutputs.htm">tutorial which introduced repeating sections</a>.</p>


	<p>We compile an engine with computation listener support. We also enable caching, so each value will be computed only once, and we won&#8217;t receive many identical events for each recomputation:</p>

	<pre class="java">EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder<span class="j-sym">()</span>;
builder.setNumericType<span class="j-sym">( </span>SpreadsheetCompiler.LONG_SCALE4 <span class="j-sym">)</span>;
builder.loadSpreadsheet<span class="j-sym">( </span>getFile<span class="j-sym">() )</span>;
builder.setFactoryClass<span class="j-sym">( </span>BonusComputationFactory.<span class="j-key">class </span><span class="j-sym">)</span>;
builder.setOutputClass<span class="j-sym">( </span>BonusComputationDefaults.<span class="j-key">class </span><span class="j-sym">)</span>;
builder.<span class="j-hl">setComputationListenerEnabled<span class="j-sym">( </span><span class="j-key">true </span><span class="j-sym">)</span></span>;
builder.<span class="j-hl">setFullCaching<span class="j-sym">( </span><span class="j-key">true </span><span class="j-sym">)</span></span>;

bindElements<span class="j-sym">( </span>builder <span class="j-sym">)</span>;
SaveableEngine engine = builder.compile<span class="j-sym">()</span>;</pre>


	<p>Then we attach a listener to the engine:</p>

	<pre class="java">TestComputationListener listener = <span class="j-key">new </span>TestComputationListener<span class="j-sym">()</span>;
Computation.Config config = <span class="j-hl">new Computation.Config<span class="j-sym">()</span></span>;
config.<span class="j-hl">cellComputationListener</span> = listener;
BonusComputationFactory factory = <span class="j-sym">(</span>BonusComputationFactory<span class="j-sym">) </span>engine.getComputationFactory<span class="j-sym">( </span><span class="j-hl">config</span> <span class="j-sym">)</span>;</pre>


	<p>Now we can execute the computation and watch intermediate values:</p>

	<pre class="java"><span class="j-key">final </span>List&lt;SpreadsheetCellComputationEvent&gt; computationEvents = listener.events;
assertEquals<span class="j-sym">( </span><span class="j-num">18</span>, computationEvents.size<span class="j-sym">() )</span>;
assertEvents<span class="j-sym">( </span><span class="j-key">new </span>String<span class="j-sym">[]{
    </span><span class="j-str">&#34;-&gt; 20000.0000 in Sheet1!B7(BonusTotal) in section: ROOT&#34;</span>,
    <span class="j-str">&#34;-&gt; 5600.0000 in Sheet1!B2(BaseSalary) in section: Sheet1!A2:Sheet1!F4(Employees)[0]&#34;</span>,
    <span class="j-str">&#34;-&gt; 20.0000 in Sheet1!C2(HoursOvertime) in section: Sheet1!A2:Sheet1!F4(Employees)[0]&#34;</span>,
    <span class="j-str">&#34;-&gt; 50.0000 in Sheet1!B6(OvertimeSalaryPerHour) in section: ROOT&#34;</span>,
    <span class="j-str">&#34;6600.0000 in Sheet1!D2 in section: Sheet1!A2:Sheet1!F4(Employees)[0]&#34;</span>,
    <span class="j-str">&#34;-&gt; 5400.0000 in Sheet1!B2(BaseSalary) in section: Sheet1!A2:Sheet1!F4(Employees)[1]&#34;</span>,
    <span class="j-str">&#34;-&gt; 15.0000 in Sheet1!C2(HoursOvertime) in section: Sheet1!A2:Sheet1!F4(Employees)[1]&#34;</span>,
    <span class="j-str">&#34;6150.0000 in Sheet1!D2 in section: Sheet1!A2:Sheet1!F4(Employees)[1]&#34;</span>,
    <span class="j-str">&#34;-&gt; 5500.0000 in Sheet1!B2(BaseSalary) in section: Sheet1!A2:Sheet1!F4(Employees)[2]&#34;</span>,
    <span class="j-str">&#34;-&gt; 0 in Sheet1!C2(HoursOvertime) in section: Sheet1!A2:Sheet1!F4(Employees)[2]&#34;</span>,
    <span class="j-str">&#34;5500.0000 in Sheet1!D2 in section: Sheet1!A2:Sheet1!F4(Employees)[2]&#34;</span>,
    <span class="j-str">&#34;18250.0000 in Sheet1!D5 in section: ROOT&#34;</span>,
    <span class="j-str">&#34;0.3616 in Sheet1!E2 in section: Sheet1!A2:Sheet1!F4(Employees)[0]&#34;</span>,
    <span class="j-str">&#34;&lt;- 7232.0000 in Sheet1!F2(BonusAmount) in section: Sheet1!A2:Sheet1!F4(Employees)[0]&#34;</span>,
    <span class="j-str">&#34;0.3369 in Sheet1!E2 in section: Sheet1!A2:Sheet1!F4(Employees)[1]&#34;</span>,
    <span class="j-str">&#34;&lt;- 6738.0000 in Sheet1!F2(BonusAmount) in section: Sheet1!A2:Sheet1!F4(Employees)[1]&#34;</span>,
    <span class="j-str">&#34;0.3013 in Sheet1!E2 in section: Sheet1!A2:Sheet1!F4(Employees)[2]&#34;</span>,
    <span class="j-str">&#34;&lt;- 6026.0000 in Sheet1!F2(BonusAmount) in section: Sheet1!A2:Sheet1!F4(Employees)[2]&#34;
</span><span class="j-sym">}</span>, computationEvents <span class="j-sym">)</span>;</pre>


	<p>As we can see, the values for the cells <em>Sheet1!D2</em>, <em>Sheet1!E2</em>, and <em>Sheet1!F2</em> were computed three times because we provided three <code>EmployeeBonusData</code> objects.</p>


	<h2><a name="pagetoc__3">Constant Values</a></h2>

	<p>If an expression in a cell does not depend on input cells and uses functions which depend only on their arguments, then the compiler calculates the value of this cell at compile-time and replaces the expression by it. The attached <a href="../javadoc/org/formulacompiler/runtime/event/CellComputationListener.html"><code>CellComputationListener</code></a> will not receive notifications from such cells when the computation is executed. But it is possible to attach a <a href="../javadoc/org/formulacompiler/spreadsheet/ConstantExpressionOptimizationListener.html"><code>ConstantExpressionOptimizationListener</code></a> to the <code>EngineBuilder</code> and watch in which cells the expressions are replaced by what constant values.</p>


	<h5>Example</h5>

	<p>We will use the same sheet as for the <a href="#example_1">first example</a>. But now we will provide an input only for height:</p>

	<pre class="java"><span class="j-key">public static class </span>Inputs2
<span class="j-sym">{
  </span><span class="j-key">public </span><span class="j-typ">double </span><span class="j-hl">getHeight<span class="j-sym">()</span></span>
  <span class="j-sym">{
    </span><span class="j-key">return </span><span class="j-num">17</span>;
  <span class="j-sym">}
}</span></pre>


	<p>So the area will always be equal to 6 and can be calculated during compile-time.</p>


	<p>Firstly we create an engine builder and attach a listener to it:</p>

	<pre class="java"><span class="j-key">final </span>EngineBuilder b = SpreadsheetCompiler.newEngineBuilder<span class="j-sym">()</span>;
b.loadSpreadsheet<span class="j-sym">( </span>getFile<span class="j-sym">() )</span>;
b.setInputClass<span class="j-sym">( </span>Inputs2.<span class="j-key">class </span><span class="j-sym">)</span>;
b.setOutputClass<span class="j-sym">( </span>Outputs.<span class="j-key">class </span><span class="j-sym">)</span>;
b.createCellNamesFromRowTitles<span class="j-sym">()</span>;
b.bindAllByName<span class="j-sym">()</span>;
<span class="j-key">final </span>TestConstExprOptListener constExprOptListener = <span class="j-key">new </span>TestConstExprOptListener<span class="j-sym">()</span>;
b.<span class="j-hl">setConstantExpressionOptimizationListener</span><span class="j-sym">( </span>constExprOptListener <span class="j-sym">)</span>;</pre>


	<p>The listener should implement <a href="../javadoc/org/formulacompiler/spreadsheet/ConstantExpressionOptimizationListener.html"><code>ConstantExpressionOptimizationListener</code></a> interface:</p>

	<pre class="java"><span class="j-key">private class </span>TestConstExprOptListener <span class="j-key">implements </span><span class="j-hl">ConstantExpressionOptimizationListener</span>
<span class="j-sym">{
  </span><span class="j-key">final </span>List&lt;SpreadsheetCellComputationEvent&gt; events = New.list<span class="j-sym">()</span>;

  <span class="j-key">public </span><span class="j-typ">void </span><span class="j-hl">constantCellCalculated</span><span class="j-sym">( </span><span class="j-hl">SpreadsheetCellComputationEvent</span> _event <span class="j-sym">)
  {
    </span><span class="j-key">this</span>.events.add<span class="j-sym">( </span>_event <span class="j-sym">)</span>;
  <span class="j-sym">}
}</span></pre>


	<p>Then we compile the engine. Let&#8217;s see what events we have got:</p>

	<pre class="java"><span class="j-key">final </span>SaveableEngine e = b.compile<span class="j-sym">()</span>;

assertEquals<span class="j-sym">( </span><span class="j-num">1</span>, constExprOptListener.events.size<span class="j-sym">() )</span>;
assertEvent<span class="j-sym">( </span><span class="j-str">&#34;6.0 in Sheet1!B4(Area)&#34;</span>, constExprOptListener.events.get<span class="j-sym">( </span><span class="j-num">0 </span><span class="j-sym">) )</span>;</pre>


	<p>As expected, the compiler replaced the expression in <em>Sheet1!B4</em> by its value.</p>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="../../doc/design.htm">Design Overview</a></div>
<div class="area"><span class="selected"><a href="../../doc/tutorial/index.htm">Tutorial</a></span></div>
<div class="nested">
<div class="area"><span class="selected">Logging Intermediate Values</span></div>
<div id="page_toc"><div class="toc"><ul class="toc toc1"><li><a href="#example_1">Basic Example</a></li><li><a href="#pagetoc__2">Repeating Sections</a></li><li><a href="#pagetoc__3">Constant Values</a></li></ul></div></div>
</div>
<div class="area"><a href="../../doc/reference/index.htm">Function Reference</a></div>
<div class="area"><a href="../../doc/javadoc/index.html">API Reference</a></div>
<div class="area"><a href="../../doc/examples/index.htm">Sample Applications</a></div>
<div class="area"><a href="../../doc/impl/index.htm">Implementation Details</a></div>
<div class="area"><a href="../../doc/limitations.htm">Limitations</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2009 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
