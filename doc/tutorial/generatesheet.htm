<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>Generating An Initial Spreadsheet File - Abacus Formula Compiler for Java</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="../../style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="../../style_print.css" rel="stylesheet" type="text/css" media="print" />
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="download_band">
				<a href="../../download/index.htm">
					<img src="../../site_img/download_button.gif" />
				</a>
			</div>
			<div id="area_band">
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../../index.htm">Home</a> | 
						
					<a href="../../quick.htm">Quick Start</a> | <span class="selected"><a href="../../doc/index.htm">Documentation</a></span> | <a href="../../download/index.htm">Download</a> | <a href="../../support.htm">Support</a> | <a href="../../contribute/index.htm">Contribute</a>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../../index.htm">Home</a> &gt; <a href="../index.htm">Documentation</a> &gt; <a href="index.htm">Tutorial</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>Generating An Initial Spreadsheet File</h1>

	<p><span class="caps">AFC</span> supports generating initial spreadsheet files that, for instance, already setup cells for the most typically used inputs and outputs. Or, if you are <a href="buildsheet.htm">using <span class="caps">AFC</span> without a spreadsheet file</a> for formulas defined using a custom UI, you can jumpstart the switch to a full-blown spreadsheet file by generating a template for exactly the formula the user had defined so far.</p>



	<h2><a name="pagetoc__1">Motivation</a></h2>

	<p><span class="caps">AFC</span> has a set of default <a href="basics.htm#Convention">conventions for the layout of a spreadsheet</a> which, when followed, ensure a certain consistency, and simplify the association of cells to inputs and outputs for your users (they do not have to use cell names). It will be much easier for them to get started with these conventions if you provide them with ready-made templates.</p>


	<p>It also greatly helps your users if they can start with a spreadsheet file that implements the computation the system is currently configured to perform. (Of course, this is only possible if this computation can be expressed in terms of a spreadsheet.)</p>


	<p>Now, while you could certainly create these initial files by hand in Excel and ship them with your application, <span class="caps">AFC</span> supports generating them at run-time. This has the following advantages:</p>

<ul>
	<li>The initial file can be generated in any of the spreadsheet file formats supported by <span class="caps">AFC</span>, as desired by the user.</li>
	<li>If the current computation is already customizable (see <a href="buildsheet.htm">using <span class="caps">AFC</span> without a spreadsheet file</a>), then generating the initial file for this computation must be done at run-time.</li>
</ul>

	<h2><a name="pagetoc__2">Generating The Internal Model</a></h2>

	<p><span class="caps">AFC</span> generates initial files from its internal <a href="../javadoc/sej/Spreadsheet.html">spreadsheet model</a>. So in order to generate one, we first need to build its model in memory. This is exactly the same process as is needed when <a href="buildsheet.htm#building">using <span class="caps">AFC</span> without a spreadsheet file</a>. See there for details.</p>


	<h2><a name="generate">Generating The File</a></h2>

	<p>Once you have the internal model set up, you can tell <span class="caps">AFC</span> to write out a spreadsheet file for it. There are two flavors of this <span class="caps">API</span>. The simpler version automatically deduces the the spreadsheet file type by the file name extension (.xls, .xsd, etc.), and always writes to a file:</p>

	<pre class="java">Spreadsheet s = buildSpreadsheet<span class="j-sym">()</span>;
SpreadsheetCompiler.<span class="j-hl">saveSpreadsheet</span><span class="j-sym">( </span>s, GENFILE, <span class="j-key">null </span><span class="j-sym">)</span>;</pre>


	<p>The other version lets you specify the extension explicitly and returns the generated spreadsheet as a stream:</p>

	<pre class="java">Spreadsheet s = buildSpreadsheet<span class="j-sym">()</span>;
ByteArrayOutputStream <span class="j-hl">os</span> = <span class="j-key">new </span>ByteArrayOutputStream<span class="j-sym">()</span>;

SpreadsheetSaver.Config cfg = <span class="j-key">new </span>SpreadsheetSaver.Config<span class="j-sym">()</span>;
cfg.spreadsheet = s;
cfg.<span class="j-hl">typeExtension</span> = <span class="j-str">&#34;.xls&#34;</span>;
cfg.<span class="j-hl">outputStream</span> = os;
<span class="j-hl">SpreadsheetCompiler.newSpreadsheetSaver<span class="j-sym">( </span>cfg <span class="j-sym">)</span>.save<span class="j-sym">()</span>;</span></pre>


	<p>As an example, the spreadsheet generated for the model described above (<a href="buildsheet.htm#building">see here</a>) looks like this:</p>

	<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>CustomerRebate</td>
			<td class="xl-num">0.1</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>ArticleRebate</td>
			<td class="xl-num">0.05</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>Rebate</td>
			<td class="xl-num">4<br/><span class="xl-exp">=(B1+B2)</span></td>
		</tr>
	</tbody>
</table>



	<h2><a name="template">Formatting The File</a></h2>

	<p>A spreadsheet file generated by <span class="caps">AFC</span> is, by default, rather unappealing visually. You can improve its looks by supplying a template spreadsheet and annotating the internal model with <em>style names</em>. These names are matched to cell names defined in the template file. If there is a match, <span class="caps">AFC</span> uses a number of formatting attributes of the template cell to format the cell(s) generated for the corresponding internal model element.</p>


	<p>More specifically, a styled <em>row</em> will pick up the row height. A styled <em>cell</em> will pick up the column width (last styled cell in a column wins) and general formatting like</p>

<ul>
	<li>font attributes,</li>
	<li>fore- and background color,</li>
	<li>borders,</li>
	<li>alignment, and</li>
	<li>indentation.</li>
</ul>

	<p>This list just gives an idea. The actual formatting transferred depends on the capabilities of the target file format.</p>


	<h3><a name="pagetoc__4_1">Styles In The Model</a></h3>

	<p>To generate a templated initial file, you first need to build your spreadsheet model with styled elements (this code also demonstrates the use of <em>call chaining</em> to avoid having to repeat the builder variable all the time):</p>

	<pre class="java"><span class="j-key">final </span>String CAPTION = <span class="j-str">&#34;Caption&#34;</span>;
<span class="j-key">final </span>String LBL = <span class="j-str">&#34;Label&#34;</span>;
<span class="j-key">final </span>String IN = <span class="j-str">&#34;InputValue&#34;</span>;
<span class="j-key">final </span>String IN_P = <span class="j-str">&#34;PercentInputValue&#34;</span>;
<span class="j-key">final </span>String IN_D = <span class="j-str">&#34;DateInputValue&#34;</span>;
<span class="j-key">final </span>String OUT_P = <span class="j-str">&#34;PercentOutputValue&#34;</span>;
<span class="j-key">final </span>String INTER = <span class="j-str">&#34;IntermediateValue&#34;</span>;

SpreadsheetBuilder b = SpreadsheetCompiler.newSpreadsheetBuilder<span class="j-sym">()</span>;

b.newCell<span class="j-sym">()</span>.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;Styled&#34; </span><span class="j-sym">) )</span>.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;Plain&#34; </span><span class="j-sym">) )</span>;

b.newRow<span class="j-sym">()</span>.<span class="j-hl">styleRow<span class="j-sym">( </span>CAPTION <span class="j-sym">)</span></span>.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;Inputs&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>CAPTION <span class="j-sym">)</span></span>.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;CustomerRebate&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>LBL <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-num">0.1 </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>IN_P <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-num">0.1 </span><span class="j-sym">) )</span>;
SpreadsheetBuilder.CellRef cr = b.currentCell<span class="j-sym">()</span>;

b.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;ArticleRebate&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>LBL <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-num">0.05 </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>IN_P <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-num">0.05 </span><span class="j-sym">) )</span>;
SpreadsheetBuilder.CellRef ar = b.currentCell<span class="j-sym">()</span>;

<span class="j-key">final </span>Calendar cal = <span class="j-key">new </span>GregorianCalendar<span class="j-sym">()</span>;
cal.clear<span class="j-sym">()</span>;
cal.set<span class="j-sym">( </span><span class="j-num">2006</span>, Calendar.OCTOBER, <span class="j-num">29 </span><span class="j-sym">)</span>;
Date orderDateSampleValue = cal.getTime<span class="j-sym">()</span>;

b.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;OrderDate&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>LBL <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span>orderDateSampleValue <span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>IN_D <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span>orderDateSampleValue <span class="j-sym">) )</span>;

b.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;IsKeyAccount&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>LBL <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-key">true </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>IN <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-key">true </span><span class="j-sym">) )</span>;

b.newRow<span class="j-sym">()</span>.<span class="j-hl">styleRow<span class="j-sym">( </span>CAPTION <span class="j-sym">)</span></span>.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;Outputs&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>CAPTION <span class="j-sym">)</span></span>.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;Rebate&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>LBL <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">( </span>b.op<span class="j-sym">( </span>Operator.PLUS, b.ref<span class="j-sym">( </span>cr <span class="j-sym">)</span>, b.ref<span class="j-sym">( </span>ar <span class="j-sym">) ) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>OUT_P <span class="j-sym">)</span></span>;

b.newRow<span class="j-sym">()</span>.<span class="j-hl">styleRow<span class="j-sym">( </span>CAPTION <span class="j-sym">)</span></span>.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;Intermediate Values&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>CAPTION <span class="j-sym">)</span></span>.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-str">&#34;(sample only)&#34; </span><span class="j-sym">) )</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>LBL <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">()</span>.<span class="j-hl">styleCell<span class="j-sym">( </span>INTER <span class="j-sym">)</span></span>;
b.newCell<span class="j-sym">()</span>;

<span class="j-key">return </span>b.getSpreadsheet<span class="j-sym">()</span>;</pre>


	<h3><a name="pagetoc__4_2">Template Spreadsheet</a></h3>

	<p>Then, create a template spreadsheet. For every style you used, create a named cell in the spreadsheet that defines the formatting.</p>

	<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b>Input Values</b><br/><span class="xl-name">(Caption)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td style="text-align: right">InputValue<br/><span class="xl-name">(Label)</span></td>
			<td class="xl-num">123.45<br/><span class="xl-name">(InputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td style="text-align: right">DateInputValue</td>
			<td class="xl-date">1/1/70<br/><span class="xl-name">(DateInputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td style="text-align: right">PercentInputValue</td>
			<td class="xl-num">25%<br/><span class="xl-name">(PercentInputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><b>Output Values</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td style="text-align: right">OutputValue</td>
			<td class="xl-num">123.45<br/><span class="xl-name">(OutputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td style="text-align: right">PercentOutputValue</td>
			<td class="xl-num">30%<br/><span class="xl-name">(PercentOutputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td><b>Intermediate Values</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td style="text-align: right">IntermediateValue</td>
			<td class="xl-num">123.45<br/><span class="xl-name">(IntermediateValue)</span></td>
		</tr>
	</tbody>
</table>



	<p>The rendering above is not a screenshot of the real Excel spreadsheet, but an <span class="caps">HTML</span> version generated automatically from the original spreadsheet. This rendering conveys only the essentials, like formulas, values, and &#8211; the important bit here &#8211; names. Since we are concerned about actual visual appearance, let&#8217;s look at a real screenshot of the test template spreadsheet (this image may be outdated as it is not regenerated with every build of <span class="caps">AFC</span>):</p>


	<p><img title="Screenshot of Template.xls" src="generatesheet-template.xls.gif" alt="Screenshot of Template.xls" /></p>


	<p>When applying a cell style, <span class="caps">AFC</span> applies as much as possible of the original style. In particular, it usually applies number and date formatting options as well. This means that if you apply a generic style, like <em>InputValue</em> below, to a date value, it will be shown as its internal numeric value rather than a date on the spreadsheet.</p>


	<h3><a name="pagetoc__4_3">Saving With A Template</a></h3>

	<p>To save this model using a template, pass the name of the template spreadsheet file to the <code>saveSpreadsheet</code> method:</p>

	<pre class="java">Spreadsheet s = buildTemplatedSpreadsheet<span class="j-sym">()</span>;
SpreadsheetCompiler.saveSpreadsheet<span class="j-sym">( </span>s, GENTEMPLATEDFILE, <span class="j-hl">TEMPLATEFILE</span> <span class="j-sym">)</span>;</pre>


	<p>Again, this also works using streams:</p>

	<pre class="java">Spreadsheet s = buildTemplatedSpreadsheet<span class="j-sym">()</span>;
ByteArrayOutputStream os = <span class="j-key">new </span>ByteArrayOutputStream<span class="j-sym">()</span>;
InputStream <span class="j-hl">ts</span> = <span class="j-key">new </span>BufferedInputStream<span class="j-sym">( </span><span class="j-key">new </span>FileInputStream<span class="j-sym">( </span>TEMPLATEFILE <span class="j-sym">) )</span>;

SpreadsheetSaver.Config cfg = <span class="j-key">new </span>SpreadsheetSaver.Config<span class="j-sym">()</span>;
cfg.spreadsheet = s;
cfg.typeExtension = <span class="j-str">&#34;.xls&#34;</span>;
cfg.outputStream = os;
cfg.<span class="j-hl">templateInputStream</span> = ts;
SpreadsheetCompiler.newSpreadsheetSaver<span class="j-sym">( </span>cfg <span class="j-sym">)</span>.save<span class="j-sym">()</span>;</pre>


	<p>Here&#8217;s a screenshot of the result (this image may be outdated as it is not regenerated with every build of <span class="caps">AFC</span>):</p>


	<p><img title="Screenshot of Result.xls" src="generatesheet-result.xls.gif" alt="Screenshot of Result.xls" /></p>


	<p>Note that unstyled cells use a default font and format, which depends on the spreadsheet format being written.</p>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="../../doc/design.htm">Design Overview</a></div>
<div class="area"><span class="selected"><a href="../../doc/tutorial/index.htm">Tutorial</a></span></div>
<div class="nested">
<div class="area"><span class="selected">Generating An Initial Spreadsheet File</span></div>
<div id="page_toc"><div class="toc"><ul class="toc toc1"><li><a href="#pagetoc__1">Motivation</a></li><li><a href="#pagetoc__2">Generating The Internal Model</a></li><li><a href="#generate">Generating The File</a></li><li class="withitems"><a href="#template">Formatting The File</a><ul class="toc toc2"><li><a href="#pagetoc__4_1">Styles In The Model</a></li><li><a href="#pagetoc__4_2">Template Spreadsheet</a></li><li><a href="#pagetoc__4_3">Saving With A Template</a></li></ul></li></ul></div></div>
</div>
<div class="area"><a href="../../doc/reference/index.htm">Function Reference</a></div>
<div class="area"><a href="../../doc/javadoc/index.htm">API Reference</a></div>
<div class="area"><a href="../../doc/examples/index.htm">Sample Applications</a></div>
<div class="area"><a href="../../doc/impl/index.htm">Implementation Details</a></div>
<div class="area"><a href="../../doc/limitations.htm">Limitations</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2008 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
