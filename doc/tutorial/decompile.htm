<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
	<title>Decompiling An Engine - Abacus Formula Compiler for Java</title>
    <style type="text/css" media="screen">
		
    </style>
	<link href="../../style_screen.css" rel="stylesheet" type="text/css" media="screen" /><link href="../../style_print.css" rel="stylesheet" type="text/css" media="print" />
</head>

<body>
	<div id="outer">
		<div id="left_background">
		</div>
		<div id="top_background">
		</div>
		
		<div class="chrome" id="top_chrome">
			<div id="logo_band">
				<img src="../../site_img/header_bar.gif" alt="AFC - Abacus Formula Compiler for Java" />
			</div>
			<div id="download_band">
				<a href="../../download/index.htm">
					<img src="../../site_img/download_button.gif" />
				</a>
			</div>
			<div id="area_band">
				<table height="100%"><tr height="100%"><td style="vertical-align:middle">
						
					<a href="../../index.htm">Home</a> | 
						
					<a href="../../quick.htm">Quick Start</a> | <span class="selected"><a href="../../doc/index.htm">Documentation</a></span> | <a href="../../download/index.htm">Download</a> | <a href="../../support.htm">Support</a> | <a href="../../contribute/index.htm">Contribute</a>
				</td></tr></table>
			</div>
		</div>

		<div id="inner">
			<div class="chrome" id="inner_top_chrome">
				<div id="crumbs_band">
					<a href="../../index.htm">Home</a> &gt; <a href="../index.htm">Documentation</a> &gt; <a href="index.htm">Tutorial</a> &gt; 
				</div>
			</div>

			<div class="content" id="content">

<h1>Decompiling An Engine</h1>

	<p>If you want to know what kind of code <span class="caps">AFC</span> generates, looking at the resulting <span class="caps">JVM</span> byte code is not everyone&#8217;s thing. To simplify this, you can ask <span class="caps">AFC</span> to decompile the generated byte code to Java source code (this feature uses the <a href="http://jode.sourceforge.net/">JODE</a> library).</p>



	<h2><a name="pagetoc__1">Background</a></h2>

	<p><span class="caps">AFC</span> generates computation engines that are opaque. This is deliberate. It leaves <span class="caps">AFC</span> free to implement engines any way it sees fit.</p>


	<p>The current implementation generates <a href="http://www.cat.nyu.edu/~meyer/jvmref/ref-Java.html">JVM byte code</a> internally. If you save an engine, the resulting file is actually an ordinary .jar file containing .class files. But you should never rely on this in your production code. It might change.</p>


	<h2><a name="pagetoc__2">Disassembling</a></h2>

	<p>During debugging and problem analysis, however, the .jar file comes in handy. You can disassemble it using the <span class="caps">JDK</span>&#8217;s <a href="http://java.sun.com/j2se/1.5.0/docs/tooldocs/windows/javap.html"><code>javap</code></a> tool. Here&#8217;s how:</p>


<pre><code>javap -c -private -classpath &lt;jarfile&gt; org/formulacompiler/gen/&lt;classname&gt;
</code></pre>
	<p>where <code>&lt;jarfile&gt;</code> is the path to the saved engine file and <code>&lt;classname&gt;</code> is the name of the class to disassemble. <span class="caps">AFC</span> generates the following classes:</p>


<dl>
<dt><code>$Factory</code></dt><dd>is the factory implementation. It is usually not very interesting.</dd>

<dt><code>$Root</code></dt><dd>is the main engine implementation. It contains all top-level computations, that is, those not contained within a repeating section.</dd>

<dt><code>$Sect&lt;n&gt;</code></dt><dd>are the engine implementations for the repeating elements of defined sections. The number <code>&lt;n&gt;</code> is simply an increasing ordinal numbering all the different sections used.</dd>
</dl>

	<h2><a name="pagetoc__3">Decompiling</a></h2>

	<p>Reading <a href="http://www.cat.nyu.edu/~meyer/jvmref/ref-Java.html">JVM byte code</a> is not something most typical Java programmers are comfortable with. Luckily, there is a good open-source &#8220;decompiler&#8221;, called <a href="http://jode.sourceforge.net/">JODE</a>, which does a good job of converting <code>javac</code>-compiled <span class="caps">JVM</span> byte code back to readable Java source code. <span class="caps">AFC</span> takes great care to produce byte code that looks like <code>javac</code>-generated code, so <span class="caps">JODE</span> works well with <span class="caps">AFC</span> too.</p>


	<p>One way to use <span class="caps">JODE</span> on generated engines is to simply run the <code>jode.jar</code> file from the public <span class="caps">JODE</span> download package, which brings up a Swing <span class="caps">GUI</span>. In the <span class="caps">GUI</span>, add the saved engine file to the class path, and then find the <code>sej.gen</code> package to decompile its contents. The classes are, of course, the same as the ones given above.</p>


	<p><span class="caps">AFC</span> also contains built-in support for decompiling engines, which uses the <span class="caps">JODE</span> core internally. When using the built-in support, you don&#8217;t have to save a compiled engine to decompile it. It can be done in-memory.</p>


	<p>The <span class="caps">API</span> supports two methods to get the decompiled result. The first returns a single string containing the decompiled classes, all concatenated together:</p>

	<pre class="java"><span class="j-cmt">// ... set up engine definition
</span>SaveableEngine engine = builder.compile<span class="j-sym">()</span>;
ByteCodeEngineSource source = FormulaDecompiler.decompile<span class="j-sym">( </span>engine <span class="j-sym">)</span>;
String text = source.toString<span class="j-sym">()</span>;</pre>


	<p>The second version saves the decompiled sources to a folder, in the proper package structure. So saving to <code>/temp</code> will generate:</p>


<pre><code>/temp/org/formulacompiler/gen/$Factory.java
/temp/org/formulacompiler/gen/$Root.java
/temp/org/formulacompiler/gen/$Sect&lt;n&gt;.java
</code></pre>
	<p>Here&#8217;s how:</p>

	<pre class="java"><span class="j-cmt">// ... set up engine definition
</span>SaveableEngine engine = builder.compile<span class="j-sym">()</span>;
ByteCodeEngineSource source = FormulaDecompiler.decompile<span class="j-sym">( </span>engine <span class="j-sym">)</span>;
source.saveTo<span class="j-sym">( </span><span class="j-key">new </span>File<span class="j-sym">( </span>pathToTargetFolder <span class="j-sym">) )</span>;</pre>


	<p>This mode is ideal to get the generated source into your <span class="caps">IDE</span>, or, for example, to cite it into documentation, as I do below:</p>

	<pre class="java"><span class="j-key">package </span>org.formulacompiler.gen;
<span class="j-key">import </span>org.formulacompiler.runtime.Computation;
<span class="j-key">import </span>org.formulacompiler.runtime.internal.Environment;
<span class="j-key">import </span>org.formulacompiler.runtime.internal.RuntimeDouble_v2;
<span class="j-key">import </span>org.formulacompiler.tutorials.Decompilation;

<span class="j-key">final class </span>$Root <span class="j-key">implements </span>Computation, Decompilation.MyOutputs
<span class="j-sym">{
    </span><span class="j-key">private final </span>Decompilation.MyInputs $inputs;
    <span class="j-key">final </span>Environment $environment;
    
    $Root<span class="j-sym">(</span>Decompilation.MyInputs myinputs, Environment environment<span class="j-sym">) {
        </span>$environment = environment;
        $inputs = myinputs;
    <span class="j-sym">}
    
    </span><span class="j-key">final </span><span class="j-typ">double </span>get$0<span class="j-sym">() {
        </span><span class="j-key">return </span>RuntimeDouble_v2.max<span class="j-sym">(</span>get$1<span class="j-sym">()</span>, get$2<span class="j-sym">())</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">public final </span><span class="j-typ">double </span>rebate<span class="j-sym">() {
        </span><span class="j-key">return </span>get$0<span class="j-sym">()</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">final </span><span class="j-typ">double </span>get$1<span class="j-sym">() {
        </span><span class="j-key">return </span>$inputs.customerRebate<span class="j-sym">()</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">final </span><span class="j-typ">double </span>get$2<span class="j-sym">() {
        </span><span class="j-key">return </span>$inputs.articleRebate<span class="j-sym">()</span>;
    <span class="j-sym">}
}</span></pre>


	<p>and:</p>

	<pre class="java"><span class="j-key">package </span>org.formulacompiler.gen;
<span class="j-key">import </span>org.formulacompiler.runtime.Computation;
<span class="j-key">import </span>org.formulacompiler.runtime.ComputationFactory;
<span class="j-key">import </span>org.formulacompiler.runtime.internal.Environment;
<span class="j-key">import </span>org.formulacompiler.tutorials.Decompilation;

<span class="j-key">public final class </span>$Factory
    <span class="j-key">implements </span>ComputationFactory, Decompilation.MyFactory
<span class="j-sym">{
    </span><span class="j-key">private final </span>Environment $environment;
    
    <span class="j-key">public </span>$Factory<span class="j-sym">(</span>Environment environment<span class="j-sym">) {
        </span>$environment = environment;
    <span class="j-sym">}
    
    </span><span class="j-key">public final </span>Computation newComputation<span class="j-sym">(</span>Object object<span class="j-sym">) {
        </span><span class="j-key">return new </span>$Root<span class="j-sym">((</span>Decompilation.MyInputs<span class="j-sym">) </span>object, $environment<span class="j-sym">)</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">public final </span>Decompilation.MyOutputs newOutputs
        <span class="j-sym">(</span>Decompilation.MyInputs myinputs<span class="j-sym">) {
        </span><span class="j-key">return new </span>$Root<span class="j-sym">(</span>myinputs, $environment<span class="j-sym">)</span>;
    <span class="j-sym">}
}</span></pre>


	<h2><a name="pagetoc__4">Improving Readability</a></h2>

	<p><span class="caps">AFC</span> tries to generate compact rather than readable code by default. In particular, it generates short, numbered internal names. These names are not easy to associate with the original spreadsheet when looking at decompiled output. So if you intend to decompile an engine, it helps to tell <span class="caps">AFC</span> to emit more readable code. In particular, it will try to use the original cell names. Here&#8217;s how:</p>

	<pre class="java"><span class="j-cmt">// ... set up engine definition
</span>builder.<span class="j-hl">setCompileToReadableCode</span><span class="j-sym">( </span><span class="j-key">true </span><span class="j-sym">)</span>;
SaveableEngine engine = builder.compile<span class="j-sym">()</span>;
ByteCodeEngineSource source = FormulaDecompiler.decompile<span class="j-sym">( </span>engine <span class="j-sym">)</span>;
source.saveTo<span class="j-sym">( </span><span class="j-key">new </span>File<span class="j-sym">( </span>pathToTargetFolder <span class="j-sym">) )</span>;</pre>


	<p>which yields the following output:</p>

	<pre class="java"><span class="j-key">package </span>org.formulacompiler.gen;
<span class="j-key">import </span>org.formulacompiler.runtime.Computation;
<span class="j-key">import </span>org.formulacompiler.runtime.internal.Environment;
<span class="j-key">import </span>org.formulacompiler.runtime.internal.RuntimeDouble_v2;
<span class="j-key">import </span>org.formulacompiler.tutorials.Decompilation;

<span class="j-key">final class </span>$Root <span class="j-key">implements </span>Computation, Decompilation.MyOutputs
<span class="j-sym">{
    </span><span class="j-key">private final </span>Decompilation.MyInputs $inputs;
    <span class="j-key">final </span>Environment $environment;
    
    $Root<span class="j-sym">(</span>Decompilation.MyInputs myinputs, Environment environment<span class="j-sym">) {
        </span>$environment = environment;
        $inputs = myinputs;
    <span class="j-sym">}
    
    </span><span class="j-key">final </span><span class="j-typ">double </span>get$REBATE<span class="j-sym">() {
        </span><span class="j-key">return </span>RuntimeDouble_v2.max<span class="j-sym">(</span>get$CUSTOMERREBATE<span class="j-sym">()</span>, get$ARTICLEREBATE<span class="j-sym">())</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">public final </span><span class="j-typ">double </span>rebate<span class="j-sym">() {
        </span><span class="j-key">return </span>get$REBATE<span class="j-sym">()</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">final </span><span class="j-typ">double </span>get$CUSTOMERREBATE<span class="j-sym">() {
        </span><span class="j-key">return </span>$inputs.customerRebate<span class="j-sym">()</span>;
    <span class="j-sym">}
    
    </span><span class="j-key">final </span><span class="j-typ">double </span>get$ARTICLEREBATE<span class="j-sym">() {
        </span><span class="j-key">return </span>$inputs.articleRebate<span class="j-sym">()</span>;
    <span class="j-sym">}
}</span></pre>


	<p>when applied to a sheet constructed like this:</p>

	<pre class="java">b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-num">0.1 </span><span class="j-sym">) )</span>;
b.nameCell<span class="j-sym">( </span><span class="j-str">&#34;CustomerRebate&#34; </span><span class="j-sym">)</span>;
cr = b.currentCell<span class="j-sym">()</span>;

b.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.cst<span class="j-sym">( </span><span class="j-num">0.05 </span><span class="j-sym">) )</span>;
b.nameCell<span class="j-sym">( </span><span class="j-str">&#34;ArticleRebate&#34; </span><span class="j-sym">)</span>;
ar = b.currentCell<span class="j-sym">()</span>;

b.newRow<span class="j-sym">()</span>;
b.newRow<span class="j-sym">()</span>;
b.newCell<span class="j-sym">( </span>b.fun<span class="j-sym">( </span>Function.MAX, b.ref<span class="j-sym">( </span>cr <span class="j-sym">)</span>, b.ref<span class="j-sym">( </span>ar <span class="j-sym">) ) )</span>;
b.nameCell<span class="j-sym">( </span><span class="j-str">&#34;Rebate&#34; </span><span class="j-sym">)</span>;</pre>

			</div>
			<div class="chrome" id="inner_bottom_chrome">
			</div>
		</div>
		
		<div class="chrome" id="left_top_chrome">
			<div id="area_toc"><div class="area"><a href="../../doc/design.htm">Design Overview</a></div>
<div class="area"><span class="selected"><a href="../../doc/tutorial/index.htm">Tutorial</a></span></div>
<div class="nested">
<div class="area"><span class="selected">Decompiling An Engine</span></div>
<div id="page_toc"><div class="toc"><ul class="toc toc1"><li><a href="#pagetoc__1">Background</a></li><li><a href="#pagetoc__2">Disassembling</a></li><li><a href="#pagetoc__3">Decompiling</a></li><li><a href="#pagetoc__4">Improving Readability</a></li></ul></div></div>
</div>
<div class="area"><a href="../../doc/reference/index.htm">Function Reference</a></div>
<div class="area"><a href="../../doc/javadoc/index.htm">API Reference</a></div>
<div class="area"><a href="../../doc/examples/index.htm">Sample Applications</a></div>
<div class="area"><a href="../../doc/impl/index.htm">Implementation Details</a></div>
<div class="area"><a href="../../doc/limitations.htm">Limitations</a></div></div>
		</div>
		</div>
		<div class="chrome" id="left_bottom_chrome">
			<div id="copyright">
				Copyright &copy; 2005-2008 by <a href="http://www.abacus.ch/">Abacus Research AG</a>.  All rights reserved.
			</div>
		</div>
	
</body>
</html>
